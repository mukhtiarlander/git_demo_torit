@using RDN.League.Models.Calendar
@using RDN.League.Models.Utilities
@using RDN.Library.Classes.Calendar.Enums
@using RDN.Library.Cache
@using RDN.Portable.Classes.Controls.Calendar.Enums
@model NewCalendarEvent
@{
    ViewBag.Title = "Update Reoccurring Event";
    Layout = "~/Views/Shared/_Layout.cshtml";
    Guid memId = RDN.Library.Classes.Account.User.GetMemberId();
    bool isSec = MemberCache.IsSecretaryOrBetterOfLeague(memId);
    bool isEventsCourd = MemberCache.IsEventsCourdinatorOrBetterOfLeague(memId);
}
<div class="fixedContainer">
    <div class="fixedlinksContainter">
        <div class="backLink">
            @if (MemberCache.GetCalendarDefaultView(memId) == RDN.Portable.Classes.Account.Enums.Settings.CalendarDefaultViewEnum.List_View)
            {
                <span>< <a href="@Url.Content("~/calendar/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", ""))">Calendar</a></span>
            }
            else
            { 
                <span>< <a href="@Url.Content("~/calendar/view/" + CalendarOwnerEntityEnum.league.ToString() + "/" + Model.CalendarId.ToString().Replace("-", ""))">Calendar</a></span>
            }
        </div>
    </div>
    <div class="fixedCenterContainter">
        <div class="fixTitle">
            Update Reoccurring Event
        </div>
        @if (isSec || isEventsCourd)
        {
            <div class="tvChanges">
                <a onclick="return confirm('Remove Events? Will Remove Events and All Points Associated')" href="@Url.Content("~/calendar/event/delete/reoccur/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + Model.CalendarItemId.ToString().Replace("-", ""))">Delete Reoccurring Events</a>
            </div>
        }
       
           <div class="titleDescription">
             Update your Reoccurring events. Any reoccuring event with attendees attached to it, will not be removed.  They are used in history for attendance tracking.  Only those events that reoccur without attendance will be updated.
        
        </div>
        <div class="divider"></div>
       
        <div>
            @using (Html.BeginForm("EditReoccurringEvent", "Calendar", FormMethod.Post, new { @id = "createNewEventForm" }))
            { 
                <table class="addForumPostTbl">
                    <tr>
                        <td class="b alRight">Name:
                        </td>
                        <td class="subject">
                            @Html.TextBoxFor(x => x.Name)
                        </td>
                    </tr>
                      <tr>
                        <td class="b  alRight alignTop">Groups:
                        </td>
                        <td>
                            <img src="@Url.Content("~/Content/images/icons/down.png")" onclick="Calendar.ExpandGroupMemberList()" class="spanLink" style="float:left;"  width="25px" />
                            <div name="ToMemberNamesSelected" id="ToMemberNamesSelected" style="float: left;">
                                @if (Model.GroupsForEvent.Count == 0)
                                { 
                                    <span class="recipientsNames">Entire League</span>
                                }
                                else
                                {
                                    foreach (var group in Model.GroupsForEvent)
                                    { 
                                    <span class="recipientsNames">@group.GroupName</span>
                                    }
                                }
                            </div>
                            <span class="i"><a href="http://wiki.rdnation.com/Calendar_and_Attendance_Tracking#Creating_An_Event">Group only events</a></span>
                            <div class="clear"></div>
                            <div class="displayNone groupMemberLists" id="groupMemberLists">
                                <ul id="groupList" class="noList"></ul>
                                <div class="clear"></div>
                            </div>

                        </td>
                    </tr>
                    <tr>
                        <td class="b alRight">Location:
                        </td>
                        <td>
                            @Html.DropDownListFor(x => x.SelectedLocationId, Model.Locations, "Choose Location...")
                            <a href="@Url.Content("~/location/new/" + Model.CalendarType + "/calendar/" + Model.CalendarId.ToString().Replace("-", ""))" >Add New Location</a>
                        </td>
                    </tr>
                    <tr>
                        <td class="b alRight">Event Type:
                        </td>
                        <td>
                            @Html.DropDownListFor(x => x.SelectedEventTypeId, Model.EventTypes, "Choose Event Type...", new { @onchange = "EventTypeChanged(this)" })
                            <a id="addNewEventTypeLink" href="@Url.Content("~/calendar/event-type/new/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "?returnUrl=" + HttpContext.Current.Request.Url)" >Add New Event Type</a> <span id="addNewEventTypeText" class="displayNone">
                                @RDN.Utilities.Enums.EnumExt.ToFreindlyName(CalendarEventPointTypeEnum.Present):
                                    <span class="b" id="presentType"></span>,
                                    @RDN.Utilities.Enums.EnumExt.ToFreindlyName(CalendarEventPointTypeEnum.Partial):
                                    <span class="b" id="partialType"></span>,
                                    @RDN.Utilities.Enums.EnumExt.ToFreindlyName(CalendarEventPointTypeEnum.Excused):
                                    <span class="b" id="excusedType"></span>,
                                    @RDN.Utilities.Enums.EnumExt.ToFreindlyName(CalendarEventPointTypeEnum.Not_Present):
                                    <span class="b" id="notPresentType"></span>,
                                    @RDN.Utilities.Enums.EnumExt.ToFreindlyName(CalendarEventPointTypeEnum.Tardy):
                                    <span class="b" id="tardyType"></span></span>
                        </td>
                    </tr>
                          <tr>
                        <td class="b  alRight">Event Type Color:
                        </td>
                        <td class="largeInput">
                            @Html.DropDownListFor(x => x.ColorTempSelected, Model.ColorList, "Choose Color...", new { @onchange = "ColorSelectorChanged()" }) @if(isSec){<span class="i">Add more colors under <a href="@Url.Content("~/league/edit/" + Model.LeagueId.ToString().Replace("-", ""))">Edit League Internal</a></span>}
                        </td>
                    </tr>
                    <tr>
                        <td class="b alRight">Start Date & Time:
                        </td>
                        <td class="largeInput">
                            @Html.TextBoxFor(x => x.StartDateDisplay)
                        </td>
                    </tr>
                    <tr>
                        <td class="b alRight">End Date & Time:
                        </td>
                        <td class="largeInput">
                            @Html.TextBoxFor(x => x.EndDateDisplay)
                        </td>
                    </tr>
                    <tr id="repeatEventRow">
                        <td class="b alRight">Repeat:
                        </td>
                        <td>
                            @Html.CheckBoxFor(x => x.IsReoccurring, new { @onchange = "IsReoccuringEvent(this)", @class = "alignLeft" })
                            <span class="b" id="summaryEvent"></span>
                        </td>
                    </tr>
                    <tr id="publicEventRow">
                        <td class="b alRight">Is Public Event:
                        </td>
                        <td>
                            @Html.CheckBoxFor(x => x.IsPublicEvent, new { @class = "alignLeft", @onchange = "PublicEventChangeCalendar(this)" })
                            <span class="i">Shows event on the public RDNation.com calendar. <span class="b">For
                                Bouts, Fundraisers etc...</span> Can't Repeat</span>
                        </td>
                    </tr>
                    <tr>
                        <td class="b alRight">Link:
                        </td>
                        <td class="subject">
                            @Html.TextBoxFor(x => x.Link)
                        </td>
                    </tr>
                    <tr>
                        <td class="b alRight">Allow Self Check In:
                        </td>
                        <td>
                            @Html.CheckBoxFor(x => x.AllowSelfCheckIn, new { @class = "alignLeft" })<span class="i">People
                                can check themselves in to events.</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(x => x.Notes)
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">

                            @Html.TextArea("Notes", Model.Notes, new
                           {
                               id = "wmd-input"
                           })

                        </td>
                    </tr>
                    <tr>
                        <td>
                            <a href="@Url.Content("~/calendar/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", ""))">Cancel Edit Event</a>
                        </td>
                        <td>
                            <input type="submit" class="primary" value="Update Event" name="updateEvent" />
                        </td>
                    </tr>
                </table>
                @Html.HiddenFor(x => x.CalendarId)
                @Html.HiddenFor(x => x.CalendarType)
                @Html.HiddenFor(x => x.CalendarItemId)
                @Html.HiddenFor(x => x.ToGroupIds)
           
                <div id="eventRepeatsPopUp" class="popUpEvent">
                    <div class="popUpHeader">
                        Repeat
                    </div>
                    <table>
                        <tr>
                            <td colspan="2" class="b">Repeats:
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                @Html.DropDownListFor(x => x.RepeatsFrequencySelectedId, Model.RepeatsFrequencyDropDown, new { @onchange = "RepeatsFrequencyEventChange(this)" })
                            </td>
                        </tr>

                        <tr id="repeatsOnRow">
                            <td colspan="2" class="b">Repeat On:
                            </td>
                        </tr>
                        <tr id="repeatsOnRowSel">
                            <td colspan="2">
                                <div class="displayNone checkboxError" id="selectDate">Please Select a Day</div>
                                @Html.CheckBoxFor(x => x.IsSunday, new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })S
                                @Html.CheckBoxFor(x => x.IsMonday, new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })M
                                @Html.CheckBoxFor(x => x.IsTuesday, new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })T
                                @Html.CheckBoxFor(x => x.IsWednesday, new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })W
                                @Html.CheckBoxFor(x => x.IsThursday, new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })T
                                @Html.CheckBoxFor(x => x.IsFriday, new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })F
                                @Html.CheckBoxFor(x => x.IsSaturday, new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })S
                            </td>
                        </tr>
                        <tr id="repeatsOnRowSelMonthly">
                            <td colspan="2">
                                <div class="displayNone checkboxError" id="selectWeekOfMonth">Please Select Week</div>
                                The @Html.DropDownListFor(x => x.MonthlyIntervalId, Model.MonthlyInterval, new { @onchange = "RepeatsFrequencyEventChange(this)" }) Week of the Month
                           
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2" class="b">Ends:
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                @Html.RadioButtonFor(m => m.EndsWhen, EndsWhenReoccuringEnum.Never.ToString(), new { @checked = "checked", @onchange = "ChangeSummaryOfRepeatedEvent(true)" })
                                @EndsWhenReoccuringEnum.Never.ToString()<br />
                                @Html.RadioButtonFor(m => m.EndsWhen, EndsWhenReoccuringEnum.On.ToString(), new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })
                                @EndsWhenReoccuringEnum.On.ToString()
                                @Html.TextBox("EndsDate", Model.EndDateReoccurringDisplay, new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2" class="b">
                                <span id="summaryPopUp"></span>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <input type="button" id="checkInButtonPopUp" value="Done" class="primary" onclick="javascript: CloseReOccuringEventWindow(true)" />
                            </td>
                            <td>
                                <span class="spanLink" onclick="javascript:CloseReOccuringEventWindow(false)">Cancel</span>
                            </td>
                        </tr>
                    </table>
                </div>
   
            }
        </div>
    </div>
</div>

<script type="text/javascript">
    
    $(document).ready(function () {
        IsReoccuringEvent($("#IsReoccurring"));
        LoadDropDownBackgroundColors();
        Calendar.InitializeNewEvent();
    });
    var d = new Date();
    var curr_date = d.getDate();

    var startDate = new Date('@Model.StartDateDisplay');
    var endDate = new Date('@Model.EndDateDisplay');

    $('#EndsDate').datepicker();
    $('#StartDateDisplay').datetimepicker({
        ampm: true,
        onSelect: function (dateText, inst) {
            startDate = new Date(dateText);
            if (endDate < startDate) {
                $('#EndDateDisplay').val($('#StartDateDisplay').val());
                endDate = startDate;
            }
        },
        stepMinute: 5,
        timeFormat: 'hh:mm tt'
    });
    $('#EndDateDisplay').datetimepicker({
        ampm: true,
        onSelect: function (dateText, inst) {
            endDate = new Date(dateText);
            if (endDate < startDate) {
                $('#StartDateDisplay').val($('#EndDateDisplay').val());
                startDate = endDate;
            }
        },
        stepMinute: 5,
        timeFormat: 'hh:mm tt'
    });

    $("#createNewEventForm").validate({
        rules: {
            Name: "required",
            StartDateDisplay: "required",
            EndDateDisplay: "required",
            SelectedLocationId: "required",
            SelectedEventTypeId: "required"
        }
    });

    $(function () {
        tinymce.init({
            mode: "textareas",
            elements: "elm2",
            theme: "advanced",
            skin: "o2k7",
            skin_variant: "silver",
            plugins: "safari,style,layer,table,advhr,advimage,advlink,inlinepopups,preview,media,contextmenu,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template",

            // Theme options
            theme_advanced_buttons1: "bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,bullist,numlist,|,outdent,indent,blockquote,|,formatselect,fontsizeselect",
            theme_advanced_buttons2: "link,unlink,anchor,image,cleanup,code,|,preview,|,forecolor,backcolor,|tablecontrols,|,hr,removeformat,visualaid,|,iespell,media,|,ltr,rtl",
            theme_advanced_buttons3: "",
            theme_advanced_buttons4: "",
            theme_advanced_toolbar_location: "top",
            theme_advanced_toolbar_align: "left",
            theme_advanced_statusbar_location: "bottom",
            theme_advanced_resizing: true,
        });
    });
</script>
