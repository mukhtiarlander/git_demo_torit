@using RDN.League.Models.Calendar
@using RDN.League.Models.Utilities
@using RDN.Library.Classes.Calendar.Enums
@using RDN.Portable.Classes.Controls.Calendar.Enums
@using RDN.Library.Cache
@using RDN.Portable.Util.Enums
@model NewCalendarEvent
@{
    ViewBag.Title = "View Calendar Event " + Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var memId = RDN.Library.Classes.Account.User.GetMemberId();
    bool isSec = MemberCache.IsSecretaryOrBetterOfLeague(memId);
    bool isEventsCourd = MemberCache.IsEventsCourdinatorOrBetterOfLeague(memId);
    bool isAttManager = MemberCache.IsAttendanceManager(memId);
    var checkedIn = Model.Attendees.Where(x => x.PointType != CalendarEventPointTypeEnum.None).ToList();
    var available = Model.Attendees.Where(x => x.Availability != AvailibilityEnum.None).ToList();
    var currentMemAvailability = available.Where(x => x.MemberId == memId && x.Availability != AvailibilityEnum.None).FirstOrDefault();
    var attend = Model.Attendees.Where(x => x.MemberId == memId && x.IsCheckedIn == true).FirstOrDefault();
    var isApartOfEvent = Model.MembersApartOfEvent.Where(x => x.MemberId == memId).FirstOrDefault();
    var AvailableType = from AvailibilityEnum d in Enum.GetValues(typeof(AvailibilityEnum))
                        where d.ToString() != "None"
                        select new { ID = (int)d, Name = RDN.Utilities.Enums.EnumExt.ToFreindlyName(d), Data = d.ToString() };
    var CalendarPointType = from CalendarEventPointTypeEnum d in Enum.GetValues(typeof(CalendarEventPointTypeEnum))
                            where d.ToString() != "None" && d.ToString() != "Tardy"
                            select new { ID = (int)d, Name = RDN.Utilities.Enums.EnumExt.ToFreindlyName(d) };
    var attendy = Model.Attendees.FirstOrDefault(x => x.MemberId == memId);
    var rsvpStatus = attendy != null ? ((AvailibilityEnum)attendy.Availability).ToFreindlyName() : (AvailibilityEnum.None).ToFreindlyName();
    var checkInStatus = attendy != null ? ((CalendarEventPointTypeEnum)attendy.PointType).ToFreindlyName() : (CalendarEventPointTypeEnum.None).ToFreindlyName();
    var checkInStatusId = attendy != null ? (int)attendy.PointType : 0;
    string className = "";
    if (checkInStatusId == 1)
    {
        className = "btn-success";
    }
    if (checkInStatusId == 2)
    {
        className = "btn-warning";
    }
    if (checkInStatusId == 3)
    {
        className = "btn-danger";
    }
    if (checkInStatusId == 4)
    {
        className = "btn-primary";
    }

}

<ol class="breadcrumb">
    <li><a href="@RDN.Utilities.Config.ConfigManager.InternalSite">Home</a></li>
    @if (MemberCache.GetCalendarDefaultView(memId) == RDN.Portable.Classes.Account.Enums.Settings.CalendarDefaultViewEnum.List_View)
    {
        <li><a href="@Url.Content("~/calendar/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + Model.StartDate.Year + "/" + Model.StartDate.Month) ">Calendar</a></li>
    }
    else
    {
        <li><a href="@Url.Content("~/calendar/view/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", ""))">Calendar</a></li>
    }
    <li class="active">@Model.Name</li>
</ol>
<div class="row">
    <div class="col-xs-12 col-md-10 col-md-offset-1">
        <div class="panel panel-default">
            <div class="panel-heading">
                <div class="row">
                    <div class="col-xs-2">
                        @if (Model.PreviousEventId != new Guid())
                        {
                            <a class="btn btn-default" href="@Url.Content("~/calendar/event/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + Model.PreviousEventId.ToString().Replace("-", ""))"><i class="fa fa-backward fa-lg" title="Last Event"></i></a>
                        }
                    </div>
                    <div class="col-xs-8 text-center">
                        <h3 class="margin-bottom-5 margin-top-5">@Model.Name</h3>
                        @if (Model.IsPublicEvent)
                        {
                            <small> Public</small>
                        }
                    </div>
                    <div class="col-xs-2 text-right">
                        @if (Model.NextEventId != new Guid())
                        {
                            <a class="btn btn-default" href="@Url.Content("~/calendar/event/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + Model.NextEventId.ToString().Replace("-", ""))"><i class="fa fa-forward fa-lg" title="Next Event"></i></a>
                        }
                    </div>
                </div>
            </div>
            <div class="panel-heading text-right">
                @if (isSec || isAttManager)
                {
                    <div class="btn-group">
                        <button type="button" class="btn btn-default dropdown-toggle btn-sm" data-toggle="dropdown" aria-expanded="false">
                            <i class="fa fa-check-square-o"></i> Check In <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu" role="menu">
                            <li><a href="@Url.Content("~/calendar/event/checkin-l/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + Model.CalendarItemId.ToString().Replace("-", ""))">Large Screen</a></li>
                            <li><a href="@Url.Content("~/calendar/event/checkin-s/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + Model.CalendarItemId.ToString().Replace("-", ""))">Small Screen</a></li>
                        </ul>
                    </div>
                }
                @if (isSec || isEventsCourd)
                {
                    if (Model.IsReoccurring)
                    {
                        <div class="btn-group">
                            <button type="button" class="btn btn-default dropdown-toggle btn-sm" data-toggle="dropdown" aria-expanded="false">
                                <i class="fa fa-pencil-square-o"></i> Edit <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu" role="menu">
                                <li>
                                    <a title="Edit Reoccuring Event" href="@Url.Content("~/calendar/event/edit/reoccurring/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + Model.CalendarReoccurringId.ToString().Replace("-", ""))">
                                        <i class="fa fa-pencil-square-o"></i> Recurring Event
                                    </a>
                                </li>
                                <li>
                                    <a title="Edit Single Event" href="@Url.Content("~/calendar/event/edit/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + Model.CalendarItemId.ToString().Replace("-", ""))">
                                        <i class="fa fa-pencil-square-o"></i> This Event
                                    </a>
                                </li>
                                <li>
                                    <a onclick="return confirm('Remove Event? Will Remove Event and All Points Associated')" title="Delete Event" href="@Url.Content("~/calendar/event/delete/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + Model.CalendarItemId.ToString().Replace("-", ""))">
                                        <i class="fa fa-times"></i> Delete Event
                                    </a>
                                </li>
                            </ul>
                        </div>
                    }
                    else
                    {
                        <div class="btn-group">
                            <button type="button" class="btn btn-default dropdown-toggle btn-sm" data-toggle="dropdown" aria-expanded="false">
                                <i class="fa fa-pencil-square-o"></i> Edit <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu" role="menu">
                                <li>
                                    <a title="Edit Single Event" href="@Url.Content("~/calendar/event/edit/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + Model.CalendarItemId.ToString().Replace("-", ""))">
                                        <i class="fa fa-pencil-square-o"></i>        This Event
                                    </a>
                                </li>
                                <li>
                                    <a onclick="return confirm('Remove Event? Will Remove Event and All Points Associated')" title="Delete Event" href="@Url.Content("~/calendar/event/delete/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + Model.CalendarItemId.ToString().Replace("-", ""))">
                                        <i class="fa fa-times"></i>  Delete Event
                                    </a>
                                </li>
                            </ul>
                        </div>
                    }
                }
                <div class="btn-group">
                    <button type="button" class="btn btn-default dropdown-toggle btn-sm" data-toggle="dropdown" aria-expanded="false">
                        <i class="fa fa-floppy-o"></i> Save <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" role="menu">
                        <li>
                            <a title="Google Event" href="@Model.GoogleCalendarUrl" target="_blank"><i class="fa fa-google"></i> Google Calendar</a>
                        </li>
                        <li>
                            @if (Model.IsReoccurring)
                            {
                                using (Html.BeginForm("EventCalendarExport", "Calendar", FormMethod.Post, new { @id = "createNewEventForm", @style = "display: inline-block;" }))
                                {
                                    <button title="Save Event" class="btn btn-default" style="border:none; width:100%;" type="submit"><i class="fa fa-floppy-o"></i> Calendar</button>
                                    @Html.HiddenFor(x => x.CalendarItemId)
                                    @Html.HiddenFor(x => x.Name)

                                }
                            }
                        </li>
                    </ul>
                </div>
                @using (Html.BeginForm("ExportEventRoster", "Calendar", FormMethod.Post, new { @id = "EventReport", @style = "display: inline-block;" }))
                {
                    <button title="Export Roster" type="submit" class="btn btn-default btn-sm" value="Export Roster"><i class="fa fa-file-excel-o"></i> Export Roster</button>
                    @Html.HiddenFor(x => x.CalendarId)
                    @Html.HiddenFor(x => x.CalendarItemId)
                    @Html.HiddenFor(x => x.CalendarReoccurringId)

                }

            </div>
            <div class="panel-body">
                @if (!string.IsNullOrEmpty(Model.NotesHtml))
                {
                    <div class="alert alert-info">
                        @Html.Raw(Model.NotesHtml)
                    </div>
                }

                <div>
                    <table class="table">
                        <tr class="trBorderB">
                            <td class="text-right b">
                                Date and Time:
                            </td>
                            <td>
                                @Model.StartDate.ToLongDateString()
                                <div>@Model.StartDate.ToShortTimeString() - @Model.EndDate.ToShortTimeString()</div>
                            </td>
                        </tr>
                        <tr class="trBorderB">
                            <td class="text-right b">
                                Location:
                            </td>
                            <td>
                                @if (Model.Location != null)
                                {
                                    @Model.Location.LocationName
                                }
                            </td>
                        </tr>
                        <tr class="trBorderB">
                            <td class="text-right b">
                                Address:
                                <br />
                                @if (Model.Location.Contact.Addresses.FirstOrDefault() != null)
                                {
                                    <a href="http://www.bing.com/maps/default.aspx?q=@Model.Location.Contact.Addresses.FirstOrDefault().Address1+@Model.Location.Contact.Addresses.FirstOrDefault().Address2,+@Model.Location.Contact.Addresses.FirstOrDefault().CityRaw,+@Model.Location.Contact.Addresses.FirstOrDefault().StateRaw+@Model.Location.Contact.Addresses.FirstOrDefault().Zip+@Model.Location.Contact.Addresses.FirstOrDefault().Country" target="_blank">View Map</a>
                                }
                            </td>
                            <td>
                                @if (Model.Location.Contact.Addresses.FirstOrDefault() != null)
                                {
                                    @Model.Location.Contact.Addresses.FirstOrDefault().Address1<br />
                                    if (!String.IsNullOrEmpty(Model.Location.Contact.Addresses.FirstOrDefault().Address2))
                                    {
                                        @Model.Location.Contact.Addresses.FirstOrDefault().Address2<br />
                                    }
                                    if (!String.IsNullOrEmpty(Model.Location.Contact.Addresses.FirstOrDefault().CityRaw))
                                    {
                                        @Model.Location.Contact.Addresses.FirstOrDefault().CityRaw<span>,</span>}
                                    if (!String.IsNullOrEmpty(Model.Location.Contact.Addresses.FirstOrDefault().StateRaw))
                                    {
                                        @Model.Location.Contact.Addresses.FirstOrDefault().StateRaw
                                    }
                                    if (!String.IsNullOrEmpty(Model.Location.Contact.Addresses.FirstOrDefault().Zip))
                                    {
                                        @Model.Location.Contact.Addresses.FirstOrDefault().Zip
                                    }
                                    if (!String.IsNullOrEmpty(Model.Location.Contact.Addresses.FirstOrDefault().Country))
                                    {
                                        <br />@Model.Location.Contact.Addresses.FirstOrDefault().Country
                                    }
                                }
                            </td>
                        </tr>
                        @if (!String.IsNullOrEmpty(Model.TicketUrl))
                        {
                            <tr class="trBorderB">
                                <td class="text-right b">
                                    Ticket Url:
                                </td>
                                <td>
                                    <a href="@Model.TicketUrl" target="_blank">@Model.TicketUrl</a>
                                </td>
                            </tr>
                        }
                        @if (!string.IsNullOrEmpty(Model.Link))
                        {
                            <tr class="trBorderB">
                                <td class="text-right b">
                                    WebSite:
                                </td>
                                <td>
                                    <a href="@Model.Link" target="_blank">@Model.Link</a>
                                </td>
                            </tr>
                            if (Model.IsPublicEvent)
                             {
                                 <tr class="trBorderB">
                                     <td class="text-right b">
                                         On @RDN.Utilities.Config.ConfigManager.WebsiteShortName:
                                     </td>
                                     <td>
                                         <a href="@Model.Link" target="_blank">@Model.Link</a>
                                     </td>
                                 </tr>
                             }
                        }
                        <tr class="trBorderB">
                            <td class="text-right b">
                                Points For Event:
                            </td>
                            <td>
                                <div class="col-xs-12 col-sm-4 col-md-2">
                                    <div class="well well-sm">
                                        <div class="form-label text-center">
                                            @RDN.Utilities.Enums.EnumExt.ToFreindlyName(CalendarEventPointTypeEnum.Present)
                                        </div>
                                        <div class="font20 text-center">
                                            <b>
                                                @Model.EventType.PointsForPresent
                                            </b>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-xs-12 col-sm-4 col-md-2">
                                    <div class="well well-sm">
                                        <div class="form-label text-center">
                                            @RDN.Utilities.Enums.EnumExt.ToFreindlyName(CalendarEventPointTypeEnum.Partial)
                                        </div>
                                        <div class="font20 text-center">
                                            <b>
                                                @Model.EventType.PointsForPartial
                                            </b>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-xs-12 col-sm-4 col-md-3">
                                    <div class="well well-sm">
                                        <div class="form-label text-center">
                                            @RDN.Utilities.Enums.EnumExt.ToFreindlyName(CalendarEventPointTypeEnum.Not_Present)
                                        </div>
                                        <div class="font20 text-center">
                                            <b>
                                                @Model.EventType.PointsForNotPresent
                                            </b>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-xs-12 col-sm-4 col-md-2">
                                    <div class="well well-sm">
                                        <div class="form-label text-center">
                                            @RDN.Utilities.Enums.EnumExt.ToFreindlyName(CalendarEventPointTypeEnum.Excused)
                                        </div>
                                        <div class="font20 text-center">
                                            <b>
                                                @Model.EventType.PointsForExcused
                                            </b>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-xs-12 col-sm-4 col-md-2">
                                    <div class="well well-sm">
                                        <div class="form-label text-center">
                                            @RDN.Utilities.Enums.EnumExt.ToFreindlyName(CalendarEventPointTypeEnum.Tardy)
                                        </div>
                                        <div class="font20 text-center">
                                            <b>
                                                @Model.EventType.PointsForTardy
                                            </b>
                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>
                        @if (Model.AllowSelfCheckIn)
                        {
                            <tr class="trBorderB">
                                <td class="text-right b">
                                    Check In:
                                </td>
                                <td>
                                    @if (attend != null)
                                    {
                                        <button class="btn btn-default btn-sm checkIn @className" id="@Model.CalendarItemId" data-attendance="@checkInStatus" onclick="javascript:checkIntoEvent('checkInPopUp','@Model.CalendarId','@Model.CalendarItemId', '@Model.Name')"
                                                data-container="body" data-toggle="popover" data-html="true">
                                            <i class="fa fa-check-square fa-lg"></i>
                                        </button>
                                    }
                                    else if (Model.AllowSelfCheckIn && Model.IsCurrentMemberApartOfEvent || (Model.AllowSelfCheckIn && isApartOfEvent != null))
                                    {
                                        <button class="btn btn-default btn-sm" @className id="@Model.CalendarItemId" data-attendance="@checkInStatus" onclick="javascript:checkIntoEvent('checkInPopUp','@Model.CalendarId','@Model.CalendarItemId', '@Model.Name')"
                                                data-container="body" data-toggle="popover" data-html="true">
                                            <i class="fa fa-square-o fa-lg"></i>
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                        <tr class="trBorderB" id="@Model.CalendarItemId-mainrow">
                            <td class="text-right b">
                                Set Availability:
                            </td>
                            <td>
                                @if (currentMemAvailability == null)
                                {
                                    <button class="btn btn-sm btn-default" id="@Model.CalendarItemId-setAvail" data-rsvp="@rsvpStatus" onclick="javascript:setAvailForEvent('@Model.CalendarId','@Model.CalendarItemId')"
                                            data-container="body" data-toggle="popover" data-html="true">
                                        <i class="fa fa-calendar fa-lg"></i>
                                    </button>
                                }
                                else if (currentMemAvailability != null)
                                {
                                    if (currentMemAvailability.Availability == AvailibilityEnum.Going)
                                    {
                                        <button class="btn btn-sm btn-success" id="@Model.CalendarItemId-setAvail" data-rsvp="@rsvpStatus" onclick="javascript:setAvailForEvent('@Model.CalendarId','@Model.CalendarItemId')"
                                                data-container="body" data-toggle="popover" data-html="true">
                                            <i class="fa fa-car fa-lg"></i>
                                        </button>
                                    }
                                    else if (currentMemAvailability.Availability == AvailibilityEnum.Maybe_Going)
                                    {
                                        <button class="btn btn-sm btn-warning" id="@Model.CalendarItemId-setAvail" data-rsvp="@rsvpStatus" onclick="javascript:setAvailForEvent('@Model.CalendarId','@Model.CalendarItemId')"
                                                data-container="body" data-toggle="popover" data-html="true">
                                            <i class="fa fa-car fa-lg"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-danger btn-sm padding-3 padding-left-10 padding-right-10" id="@Model.CalendarItemId-setAvail" data-rsvp="@rsvpStatus" onclick="javascript:setAvailForEvent('@Model.CalendarId','@Model.CalendarItemId')"
                                                data-container="body" data-toggle="popover" data-html="true">
                                            <i class="fa fa-home font18"></i>
                                        </button>
                                    }
                                }
                            </td>
                        </tr>
                        <tr class="trBorderB">
                            <td class="text-right b">
                                Availability (@available.Count):
                            </td>
                            <td>
                                @if (available.Count == 0)
                                {
                                    <span>No Availability</span>
                                }
                                else
                                {
                                    <div class="panel panel-default">
                                        <div class="panel-body no-padding">
                                            <table id="available" class="table table-condensed table-hover table-responsive table-striped">
                                                @if (available.Count > 0)
                                                {
                                                    <thead class="vmTableHead">
                                                        <tr>
                                                            <th></th>
                                                            <th>
                                                                Number
                                                            </th>
                                                            <th>
                                                                Name
                                                            </th>
                                                            <th>Available</th>
                                                        </tr>
                                                    </thead>
                                                }
                                                <tbody>
                                                    @for (int i = 0; i < available.Count; i++)
                                                    {
                                                        <tr>
                                                            <td class="b">
                                                                @(i + 1).
                                                            </td>
                                                            <td>
                                                                @available[i].MemberNumber
                                                            </td>
                                                            <td>
                                                                <a target="_blank" href="@Url.Content("~/member/" + available[i].MemberId.ToString().Replace("-", "") + "/" + RDN.Utilities.Strings.StringExt.ToSearchEngineFriendly( available[i].MemberName))">
                                                                    @available[i].MemberName
                                                                </a>
                                                            </td>
                                                            <td>
                                                                @RDN.Utilities.Enums.EnumExt.ToFreindlyName(available[i].Availability)
                                                            </td>
                                                        </tr>
                                                        if (!String.IsNullOrEmpty(available[i].AvailableNotes))
                                                        {
                                                            <tr class="trBorderB">
                                                                <td></td>
                                                                <td class="i veNote" colspan="3">
                                                                    @available[i].AvailableNotes
                                                                </td>
                                                            </tr>
                                                        }
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                }
                            </td>
                        </tr>
                        @if (Model.GroupsForEvent.Count > 0)
                        {
                            <tr class="trBorderB">
                                <td class="text-right b">
                                    Groups:
                                </td>
                                <td>
                                    @foreach (var g in Model.GroupsForEvent)
                                    {
                                        <span>@g.GroupName; </span>
                                    }
                                </td>
                            </tr>
                        }
                        <tr class="trBorderB">
                            <td class="text-right b">
                                Members Checked In (@checkedIn.Count):
                            </td>
                            <td>
                                @if (checkedIn.Count > 0)
                                {
                                    <div class="panel panel-default">
                                        <div class="panel-body no-padding">
                                            <table id="members" class="table table-condensed table-hover table-responsive table-striped">
                                                @if (checkedIn.Count > 0)
                                                {
                                                    <thead class="vmTableHead">
                                                        <tr>
                                                            <th></th>
                                                            <th>
                                                                Number
                                                            </th>
                                                            <th>
                                                                Name
                                                            </th>
                                                            <th>
                                                                Point Type
                                                            </th>
                                                            <th>
                                                                Points
                                                            </th>
                                                        </tr>
                                                    </thead>
                                                }
                                                <tbody>
                                                    @for (int i = 0; i < checkedIn.Count; i++)
                                                    {
                                                        <tr class="@(String.IsNullOrEmpty(checkedIn[i].Note) ? "trBorderB" : String.Empty)">
                                                            <td class="b">
                                                                @(i + 1).
                                                            </td>
                                                            <td>
                                                                @checkedIn[i].MemberNumber
                                                            </td>
                                                            <td>
                                                                <a target="_blank" href="@Url.Content("~/member/" + checkedIn[i].MemberId.ToString().Replace("-", "") + "/" + checkedIn[i].MemberName)">
                                                                    @checkedIn[i].MemberName
                                                                </a>
                                                            </td>
                                                            <td>
                                                                @RDN.Utilities.Enums.EnumExt.ToFreindlyName(checkedIn[i].PointType)
                                                                @if (checkedIn[i].SecondaryPointType == CalendarEventPointTypeEnum.Tardy)
                                                                { <span>
                                                                    - @RDN.Utilities.Enums.EnumExt.ToFreindlyName(checkedIn[i].SecondaryPointType)
                                                                </span> }
                                                            </td>
                                                            <td>
                                                                @if (checkedIn[i].PointType == CalendarEventPointTypeEnum.Present)
                                                                {
                                                                    @Model.EventType.PointsForPresent
                                                                    if (checkedIn[i].SecondaryPointType == CalendarEventPointTypeEnum.Tardy)
                                                                    { <span>
                                                                        + @Model.EventType.PointsForTardy = @(Model.EventType.PointsForPresent + Model.EventType.PointsForTardy)
                                                                    </span> }
                                                                }
                                                                @if (checkedIn[i].PointType == CalendarEventPointTypeEnum.Partial)
                                                                {
                                                                    @Model.EventType.PointsForPartial
                                                                    if (checkedIn[i].SecondaryPointType == CalendarEventPointTypeEnum.Tardy)
                                                                    { <span>
                                                                        + @Model.EventType.PointsForTardy = @(Model.EventType.PointsForPartial + Model.EventType.PointsForTardy)
                                                                    </span> }
                                                                }
                                                                @if (checkedIn[i].PointType == CalendarEventPointTypeEnum.Not_Present)
                                                                {
                                                                    @Model.EventType.PointsForNotPresent
                                                                    if (checkedIn[i].SecondaryPointType == CalendarEventPointTypeEnum.Tardy)
                                                                    { <span>
                                                                        + @Model.EventType.PointsForTardy = @(Model.EventType.PointsForNotPresent + Model.EventType.PointsForTardy)
                                                                    </span> }
                                                                }
                                                                @if (checkedIn[i].PointType == CalendarEventPointTypeEnum.Excused)
                                                                {
                                                                    @Model.EventType.PointsForExcused
                                                                    if (checkedIn[i].SecondaryPointType == CalendarEventPointTypeEnum.Tardy)
                                                                    { <span>
                                                                        + @Model.EventType.PointsForTardy = @(Model.EventType.PointsForExcused + Model.EventType.PointsForTardy)
                                                                    </span> }
                                                                }
                                                            </td>
                                                        </tr>
                                                        if (!String.IsNullOrEmpty(checkedIn[i].Note))
                                                        {
                                                            <tr class="trBorderB">
                                                                <td></td>
                                                                <td></td>
                                                                <td class="i veNote" colspan="3">
                                                                    @checkedIn[i].Note
                                                                </td>
                                                            </tr>
                                                        }
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <span>No CheckIn</span>
                                }
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="checkInPopUp" style="display: none;" class="well">
    <div class="row">
        <div class="col-xs-12">
            <label class="form-label">Check In</label>
            <div class="margin-bottom-5">
                @Html.DropDownList("checkInSelection", new SelectList(CalendarPointType, "ID", "Name"), "Check In...", new { @class = "form-control" })
            </div>
            <div class="margin-bottom-10">
                <label> @Html.CheckBox("IsTardy")<span class="b">Tardy?</span></label>
            </div>
        </div>
        <div class="col-xs-12">
            <label class="form-label">Notes</label>
            <div class="margin-bottom-20">
                <input type="text" id="notes" class="form-control" />
            </div>
        </div>
        <div class="col-xs-12 margin-bottom-5">
            <button type="button" id="checkInButtonPopUp" value="Check In" class="btn btn-primary" onclick="javascript: checkInMemberToEvent()">Check In</button>
            <button type="button" class="btn btn-default" tabindex="-1" onclick="javascript:CloseAddedRow()">Cancel</button>
        </div>
        <div class="col-xs-12">
            <a href="@RDN.Library.Classes.Config.LibraryConfig.WikiSite/Calendar_and_Attendance_Tracking#Calendar_Point_Types_Explained" target="_blank">Point Types Explained</a>
        </div>
    </div>
</div>

<div id="availablePopUp" style="display: none;">
    <div class="row">
        <div class="col-xs-12">
            <label class="form-label">Available Type</label>
            <div class="margin-bottom-20">
                @Html.DropDownList("availableSelection", new SelectList(AvailableType, "Data", "Name"), "Set Availability...", new { @class = "form-control" })
            </div>
        </div>
        <div class="col-xs-12">
            <label class="form-label">Notes</label>
            <div class="margin-bottom-20">
                <input type="text" id="availableNotes" class="form-control" />
            </div>
        </div>
        <div class="col-xs-12">
            <button type="button" id="availableButtonPopUp" value="Set Availability" class="btn btn-primary" onclick="javascript:setAvailabilityMemberToEvent()">Set Availability</button>
            <button type="button" class="btn btn-default" tabindex="-1" onclick="javascript:CloseAddedRow()">Cancel</button>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $('#@Model.CalendarItemId').tooltip({
            placement: 'bottom',
            title: $('#@Model.CalendarItemId').attr("data-attendance")
        });
        $('#@Model.CalendarItemId-setAvail').tooltip({
            placement: 'bottom',
            title: $('#@Model.CalendarItemId-setAvail').attr("data-rsvp")
        });
    });

    //$(document).ready(function () {
    //    $('#members').dataTable({
    //        "aaSorting": [[1, "asc"]],
    //        "bPaginate": false,
    //        "bLengthChange": false,
    //        "bFilter": true,
    //        "bSort": true,
    //        "bInfo": false,
    //        "bAutoWidth": false
    //    });
    //    $('#available').dataTable({
    //        "aaSorting": [[1, "asc"]],
    //        "bPaginate": false,
    //        "bLengthChange": false,
    //        "bFilter": true,
    //        "bSort": true,
    //        "bInfo": false,
    //        "bAutoWidth": false
    //    });
    //});
</script>
