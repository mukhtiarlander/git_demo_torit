@using RDN.Library.Classes.Calendar;
@using RDN.Library.Classes.Calendar.Enums;
@using RDN.Portable.Classes.Controls.Calendar.Enums;
@using RDN.Portable.Classes.Controls.Calendar;
@using RDN.Library.Cache;
@model Calendar
@{
    ViewBag.Title = "Calendar for " + Model.EntityName;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var CalendarPointType = from CalendarEventPointTypeEnum d in Enum.GetValues(typeof(CalendarEventPointTypeEnum))
                            where d.ToString() != "None" && d.ToString() != "Tardy"
                            select new { ID = (int)d, Name = RDN.Utilities.Enums.EnumExt.ToFreindlyName(d) };
    var AvailableType = from AvailibilityEnum d in Enum.GetValues(typeof(AvailibilityEnum))
                        where d.ToString() != "None"
                        select new { ID = (int)d, Name = RDN.Utilities.Enums.EnumExt.ToFreindlyName(d) };
    var memId = RDN.Library.Classes.Account.User.GetMemberId();
    var isSec = MemberCache.IsSecretaryOrBetterOfLeague(memId);
    bool isEventsCourd = MemberCache.IsEventsCourdinatorOrBetterOfLeague(memId);
    var isAttendance = MemberCache.IsAttendanceManager(memId);
}
@if (Model.CalendarId == new Guid())
{
    <div class="fixedContainer">
        <div class="fixedCenterContainter">
            <div class="fixTitle">
                Calendar Setup
            </div>
            <div class="divider"></div>
            <div>
                It looks like your calendar has not yet been created. Go ahead and create one so
                you can start scheduling events and tracking attendance! This calendar will be open
                to all your members!
            </div>
            @using (Html.BeginForm("CreateCalendar", "Calendar"))
            {
                <div>
                    <input type="submit" class="primary" value="Create Calendar" />
                </div>
                @Html.HiddenFor(x => x.OwnerEntity);
            }
        </div>
    </div>
}
else
{
    @section SecondNav{
        <div class="container ">
            <ul class="nav nav-pills nav-secondary">

                @for (int i = -3; i < 4; i++)
                {

                    <li class="calPagerLi @(i == 0 ? "active" : "")">
                        <a role="presentation" href="@Url.Content("~/calendar/" + Model.OwnerEntity + "/" + @Model.CalendarId.ToString().Replace("-", "") + "/" + @Model.CurrentDateSelected.AddMonths(i).Year + "/" + @Model.CurrentDateSelected.AddMonths(i).Month)">
                            @Model.CurrentDateSelected.AddMonths(i).Month/@Model.CurrentDateSelected.AddMonths(i).Year.ToString().Remove(0, 2)
                        </a>
                    </li>
                }
            </ul>
        </div>


    }


    <div class="row row-offcanvas row-offcanvas-right">
            <h2 class="col-xs-offset-1 pull-left" >
                Schedule
            </h2>
            <p class="pull-right visible-xs">
                <button type="button" class="btn btn-primary btn-xs" data-toggle="offcanvas">
                    <i class="fa fa-angle-left fa-3x"></i>
                </button>
            </p>
        <div class="clearfix"></div>
        <div class="col-xs-12 col-sm-10">
            <table class="table table-hover table-striped">
                <thead>
                    <tr>
                        <th></th>
                        <th class="smallCaps text-center">RSVP</th>
                        <th class="text-center">Check In</th>
                        <th>
                            Event
                        </th>
                        <th>
                            Date
                        </th>
                        <th>
                            Time
                        </th>
                        <th>
                            Location
                        </th>

                        @if (isSec || isAttendance)
                        {
                            <th class="text-center">
                                Check In Members
                            </th>
                        }
                        else
                        {
                            <th></th>}
                    </tr>
                </thead>
                @foreach (var calEvent in Model.Events.OrderByDescending(x => x.StartDate))
                {

                    var avail = calEvent.Attendees.Where(x => x.MemberId == memId && x.Availability != AvailibilityEnum.None).FirstOrDefault();
                    var attend = calEvent.Attendees.Where(x => x.MemberId == memId && x.IsCheckedIn == true).FirstOrDefault();
                    var isApartOfEvent = calEvent.MembersApartOfEvent.Where(x => x.MemberId == memId).FirstOrDefault();
                    <tr id="@calEvent.CalendarItemId-mainrow" class="forumTopicRow @(calEvent.StartDate.ToString("yyyy/MM/dd") == DateTime.Now.ToString("yyyy/MM/dd") ? "calCurrentDateEvent" : "")">
                        <td>

                            <div class='selectedColorList' style='background-color:@calEvent.ColorTempSelected;'></div>

                        </td>
                        <td class="text-center">
                            @if (calEvent.EventType.EventType != CalendarEventTypeEnum.Birthday && calEvent.EventType.EventType != CalendarEventTypeEnum.StartSkatingDate)
                            {
                                if (avail == null)
                                {
                                    <span id="@calEvent.CalendarItemId-setAvail" onclick="javascript:setAvailForEvent('@Model.CalendarId','@calEvent.CalendarItemId')">
                                        <i class="fa fa-calendar-o fa-3x cursor"></i>
                                    </span>
                                }
                                else if (avail != null)
                                {
                                    <span id="@calEvent.CalendarItemId-setAvail" onclick="javascript:setAvailForEvent('@Model.CalendarId','@calEvent.CalendarItemId')">
                                        <i class="fa fa-calendar fa-3x cursor"></i>
                                    </span>
                                }
                            }

                        </td>
                        <td class="text-center">
                            @if (attend != null)
                            {

                                <i id="@calEvent.CalendarItemId" onclick="javascript:checkIntoEvent('checkInPopUp','@Model.CalendarId','@calEvent.CalendarItemId', '@calEvent.Name')" class="fa fa-check-square fa-3x cursor"></i>
                            }
                            else if (calEvent.AllowSelfCheckIn && calEvent.IsCurrentMemberApartOfEvent || (calEvent.AllowSelfCheckIn && isApartOfEvent != null))
                            {
                                <i id="@calEvent.CalendarItemId" onclick="javascript:checkIntoEvent('checkInPopUp','@Model.CalendarId','@calEvent.CalendarItemId', '@calEvent.Name')" class="fa fa-square-o fa-3x cursor"></i>
                            }
                            else if (calEvent.EventType.EventType == CalendarEventTypeEnum.Birthday)
                            {
                                <i class="fa fa-birthday-cake fa-3x "></i>
                            }
                            else if (calEvent.EventType.EventType == CalendarEventTypeEnum.StartSkatingDate)
                            {
                                <img src="@Url.Content("~/Content/images/icons/games.png")" height="25px" />
                            }

                        </td>
                        <td class="noTwoLine @(calEvent.StartDate.ToString("yyyy/MM/dd") == DateTime.Now.ToString("yyyy/MM/dd") ? "b" : "")">
                            @if (calEvent.EventType.EventType == CalendarEventTypeEnum.Event)
                            {
                                <a href="@Url.Content("~/calendar/event/" + Model.OwnerEntity.ToString().Replace("-", "") + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + calEvent.CalendarItemId.ToString().Replace("-", ""))">@calEvent.Name</a>
                            }
                            else if (calEvent.EventType.EventType == CalendarEventTypeEnum.Birthday)
                            {
                                <a href="@Url.Content("~/calendar/birthday/" + calEvent.CalendarItemId.ToString().Replace("-", "") + "/" + RDN.Utilities.Strings.StringExt.ToSearchEngineFriendly(calEvent.Name))">@calEvent.Name</a>
                            }
                            else if (calEvent.EventType.EventType == CalendarEventTypeEnum.StartSkatingDate)
                            {
                                <a href="@Url.Content("~/calendar/started-skating/" + calEvent.CalendarItemId.ToString().Replace("-", "") + "/" + RDN.Utilities.Strings.StringExt.ToSearchEngineFriendly(calEvent.Name))">@calEvent.Name</a>
                            }
                        </td>
                        <td class="noTwoLine">
                            @calEvent.StartDate.ToString("ddd"), @calEvent.StartDate.ToShortDateString()
                        </td>
                        <td class="noTwoLine">
                            @if (calEvent.EventType.EventType == CalendarEventTypeEnum.Event)
                            {
                                <span>@calEvent.StartDate.ToShortTimeString() - @calEvent.EndDate.ToShortTimeString()</span>
                            }
                        </td>
                        <td>
                            @if (calEvent.EventType.EventType == CalendarEventTypeEnum.Event)
                            {
                                if (calEvent.Location != null)
                                {
                                    @calEvent.Location.LocationName
                                }
                            }
                        </td>

                        <td class="text-center ">
                            @if (calEvent.EventType.EventType == CalendarEventTypeEnum.Event && (isSec || isAttendance))
                            {
                                <a class="btn btn-primary" href="@Url.Content("~/calendar/event/checkin-l/" + Model.OwnerEntity.ToString().Replace("-", "") + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + calEvent.CalendarItemId.ToString().Replace("-", ""))">Large</a>
                                
                                <a class="btn btn-primary" href="@Url.Content("~/calendar/event/checkin-s/" + Model.OwnerEntity.ToString().Replace("-", "") + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + calEvent.CalendarItemId.ToString().Replace("-", ""))">Small</a>

                            }
                        </td>
                    </tr>
                }
            </table>

        </div>


        <div class="col-xs-6 col-sm-2 sidebar-offcanvas" id="sidebar">
            <div class="list-group nav">
                @if (isSec || isAttendance || isEventsCourd)
                {
                    <a class="list-group-item" title="New Event" href="@Url.Content("~/calendar/new/" + @Model.OwnerEntity + "/" + @Model.CalendarId.ToString().Replace("-", ""))">
                        <i class="fa fa-plus fa-2x"></i> New
                    </a>
                }
                <a class="list-group-item" title="Large Calendar" href="@Url.Content("~/calendar/view/" + @Model.OwnerEntity + "/" + @Model.CalendarId.ToString().Replace("-", ""))">
                    <i class="fa fa-calendar fa-2x"></i> Large
                </a>
                @if (isSec || isAttendance || isEventsCourd)
                {

                    <a class="list-group-item" title="Import Calendar" href="@Url.Content("~/calendar/import/" + @Model.OwnerEntity + "/" + @Model.CalendarId.ToString().Replace("-", ""))">
                        <span class="glyphicon glyphicon-import fa-2x" aria-hidden="true"></span>  Import
                    </a>
                    <a class="list-group-item" title="Calendar Settings" href="@Url.Content("~/calendar/settings/" + @Model.OwnerEntity + "/" + @Model.CalendarId.ToString().Replace("-", ""))">
                        <i class="fa fa-cogs fa-2x"></i> Settings
                    </a>

                }
                <a class="list-group-item" title="Run Report" href="@Url.Content("~/calendar/reports/" + @Model.OwnerEntity + "/" + @Model.CalendarId.ToString().Replace("-", ""))">
                    <span class="glyphicon glyphicon-list-alt fa-2x" aria-hidden="true"></span> Report
                </a>


            </div>
        </div>
    </div>

    <div id="checkInPopUp" style="display: none;" class="well">
        <table class="table well">
            <tr>
                <td class="b text-right">
                    Check In:
                </td>
                <td colspan="2" class="form-inline">
                    @Html.DropDownList("checkInSelection", new SelectList(CalendarPointType, "ID", "Name"), "Check In...", new { @class = "form-control" })
                    <label> @Html.CheckBox("IsTardy")<span class="b">Tardy?</span></label>
                </td>
            </tr>
            <tr>
                <td class="b  text-right">
                    Notes:
                </td>
                <td colspan="2">
                    <input type="text" id="notes" style="width: 95%;" class="form-control" />
                </td>
            </tr>

            <tr>

                <td>
                    <button type="button" class="btn btn-default" tabindex="-1" onclick="javascript:CloseAddedRow()">Cancel</button>
                </td>

                <td class="alignRight">
                    <button type="button" id="checkInButtonPopUp" value="Check In" class="btn btn-primary" onclick="javascript: checkInMemberToEvent()">Check In</button>
                </td>
                <td>
                    <a href="http://wiki.rdnation.com/Calendar_and_Attendance_Tracking#Calendar_Point_Types_Explained" target="_blank">Point Types Explained</a>
                </td>
            </tr>
        </table>
    </div>
    <div id="availablePopUp" style="display: none;">
        <table class="table well">
            <tr>
                <td class="b text-right">
                    Available Type:
                </td>
                <td colspan="2">
                    @Html.DropDownList("availableSelection", new SelectList(AvailableType, "ID", "Name"), "Set Availability...", new { @class = "form-control" })

                </td>
            </tr>
            <tr>
                <td class="b text-right">
                    Notes:
                </td>
                <td colspan="2">
                    <input type="text" id="availableNotes" style="width: 95%;" class="form-control" />
                </td>
            </tr>

            <tr>

                <td>
                    <button type="button" class="btn btn-default" tabindex="-1" onclick="javascript:CloseAddedRow()">Cancel</button>
                </td>
                <td class="alignRight">
                    <button type="button" id="availableButtonPopUp" value="Set Availability" class="btn btn-primary" onclick="javascript: setAvailabilityMemberToEvent()">Set Availability</button>
                </td>
                <td></td>
            </tr>
        </table>
    </div>
    <script type="text/javascript">
        $(document).ready(function () {
            $('[data-toggle="offcanvas"]').click(function () {
                $('.row-offcanvas').toggleClass('active');
            });
        });
    </script>

}
