@using RDN.League.Models.Calendar
@using RDN.League.Models.Utilities
@using RDN.Library.Classes.Calendar.Enums
@using RDN.Library.Cache
@using RDN.Portable.Classes.Controls.Calendar.Enums
@model NewCalendarEvent
@{
    ViewBag.Title = "Create New Event";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var memId = RDN.Library.Classes.Account.User.GetMemberId();
    bool isSec = MemberCache.IsSecretaryOrBetterOfLeague(memId);
}
<div class="fixedContainer">
    <div class="fixedlinksContainter">
        <div class="backLink">
            @if (MemberCache.GetCalendarDefaultView(memId) == RDN.Portable.Classes.Account.Enums.Settings.CalendarDefaultViewEnum.List_View)
            {
                <span>< <a href="@Url.Content("~/calendar/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", ""))">Calendar</a></span>
            }
            else
            { 
                <span>< <a href="@Url.Content("~/calendar/view/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", ""))">Calendar</a></span>
            }
        </div>
    </div>
    <div class="fixedCenterContainter">
        <div class="fixTitle">
            Create New Event
        </div>

        <div class="titleDescription">
            Here you create events to start tracking attendance for your league. It also allows
            you to keep track of events them selves to better manage your leagues by telling
            them when and where each event is.
      
        </div>
        <div class="divider"></div>

        <div>
            @using (Html.BeginForm("NewEvent", "Calendar", FormMethod.Post, new { @id = "createNewEventForm" }))
            { 
                <table class="addForumPostTbl">
                    <tr>
                        <td class="b alRight">Name:
                        </td>
                        <td class="subject">
                            @Html.TextBoxFor(x => x.Name)
                        </td>
                    </tr>
                    <tr>
                        <td class="b  alRight alignTop">Groups:
                        </td>
                        <td>
                            <img src="@Url.Content("~/Content/images/icons/down.png")" onclick="Calendar.ExpandGroupMemberList()" class="spanLink" style="float:left;"  width="25px" />
                             <div name="ToMemberNamesSelected" id="ToMemberNamesSelected" style="float:left;">
                                 <span class="recipientsNames">Entire League</span>
                            </div>
                            <span class="i"><a href="http://wiki.rdnation.com/Calendar_and_Attendance_Tracking#Creating_An_Event">Group only events</a></span>
                            <div class="clear"></div>
                            <div class="displayNone groupMemberLists" id="groupMemberLists">
                                <ul id="groupList" class="noList"></ul>
                                <div class="clear"></div>
                            </div>
                            
                        </td>
                    </tr>
                    <tr>
                        <td class="b  alRight">Location:
                        </td>
                        <td>
                            @Html.DropDownListFor(x => x.SelectedLocationId, Model.Locations, "Choose Location...")
                            <a href="@Url.Content("~/location/new/" + Model.CalendarType + "/calendar/" + Model.CalendarId.ToString().Replace("-", ""))" >Add New Location</a>
                        </td>
                    </tr>
                    <tr>
                        <td class="b  alRight">Event Type:
                        </td>
                        <td>
                            @Html.DropDownListFor(x => x.SelectedEventTypeId, Model.EventTypes, "Choose Event Type...", new { @onchange = "EventTypeChanged(this)" })
                            <a id="addNewEventTypeLink" href="@Url.Content("~/calendar/event-type/new/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "?returnUrl=" + HttpContext.Current.Request.Url)" >Add New Event Type</a> <span id="addNewEventTypeText" class="displayNone">
                                @RDN.Utilities.Enums.EnumExt.ToFreindlyName(CalendarEventPointTypeEnum.Present):
                                    <span class="b" id="presentType"></span>,
                                    @RDN.Utilities.Enums.EnumExt.ToFreindlyName(CalendarEventPointTypeEnum.Partial):
                                    <span class="b" id="partialType"></span>,
                                    @RDN.Utilities.Enums.EnumExt.ToFreindlyName(CalendarEventPointTypeEnum.Excused):
                                    <span class="b" id="excusedType"></span>,
                                    @RDN.Utilities.Enums.EnumExt.ToFreindlyName(CalendarEventPointTypeEnum.Not_Present):
                                    <span class="b" id="notPresentType"></span>,
                                    @RDN.Utilities.Enums.EnumExt.ToFreindlyName(CalendarEventPointTypeEnum.Tardy):
                                    <span class="b" id="tardyType"></span></span>
                        </td>
                    </tr>
                    <tr>
                        <td class="b vLTD">Event Type Color:
                        </td>
                        <td class="largeInput">
                            @Html.DropDownListFor(x => x.ColorTempSelected, Model.ColorList, "Choose Color...", new { @onchange = "ColorSelectorChanged()" }) @if (isSec)
                                                                                                                                                              { <span class="i"> Add more colors under <a href="@Url.Content("~/league/edit/" + Model.LeagueId.ToString().Replace("-", ""))">Edit League Internal</a></span>}
                        </td>
                    </tr>
                    <tr>
                        <td class="b  alRight">Start Date & Time:
                        </td>
                        <td class="largeInput">
                            @Html.TextBoxFor(x => x.StartDate, new { @onchange = "StartDateOnBlur()" })
                        </td>
                    </tr>
                    <tr>
                        <td class="b  alRight">End Date & Time:
                        </td>
                        <td class="largeInput">
                            @Html.TextBoxFor(x => x.EndDate, new { @onchange = "EndDateOnBlur()" })
                        </td>
                    </tr>
                    <tr id="repeatEventRow">
                        <td class="b  alRight">Repeat:
                        </td>
                        <td>
                            @Html.CheckBoxFor(x => x.IsReoccurring, new { @onchange = "IsReoccuringEvent(this)", @class = "alignLeft" })
                            <span class="b" id="summaryEvent"></span>
                        </td>
                    </tr>
                    <tr id="publicEventRow">
                        <td class="b  alRight">Is Public Event:
                        </td>
                        <td>
                            @Html.CheckBoxFor(x => x.IsPublicEvent, new { @class = "alignLeft", @onchange = "PublicEventChangeCalendar(this)" })
                            <span class="i">Shows event on the public RDNation.com calendar. <span class="b">For
                                Bouts, Fundraisers etc...</span></span>
                        </td>
                    </tr>
                    <tr>
                        <td class="b  alRight">Ticket Url:
                        </td>
                        <td class="largeInput">
                            @Html.TextBoxFor(x => x.TicketUrl) <span class="i">Direct link for fans to buy tickets from.</span>
                        </td>
                    </tr>
                    <tr>
                        <td class="b  alRight">Link:
                        </td>
                        <td class="largeInput">
                            @Html.TextBoxFor(x => x.Link)
                        </td>
                    </tr>
                    <tr>
                        <td class="b  alRight">Allow Self Check In:
                        </td>
                        <td>
                            @Html.CheckBoxFor(x => x.AllowSelfCheckIn, new { @class = "alignLeft" })<span class="i">People
                                can check them selves in to events.</span>
                        </td>
                    </tr>
                    <tr>
                        <td class="b  alRight">Broadcast:
                        </td>
                        <td>
                            @Html.CheckBoxFor(x => x.BroadcastEvent, new { @class = "alignLeft" })<span class="i">Email all members about event.</span>
                        </td>
                    </tr>
                    <tr>
                        <td class="b  alRight">Event Information:
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2">

                            @Html.TextArea("Notes", string.Empty, new
                           {
                               id = "wmd-input"
                           })

                        </td>
                    </tr>
                    <tr>
                        <td>
                            <a href="@Url.Content("~/calendar/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", ""))">Cancel Event</a>
                        </td>
                        <td>
                            <input type="submit" class="primary" value="Create Event" name="createEvent" />
                            <input type="submit" class="primary" value="Create & Add Another" name="createAnother" />
                            <span id="createtrackSubmit">
                                <input type="submit" class="primary" value="Create & Track" name="createTrack" />
                            </span>
                        </td>
                    </tr>
                </table>
                @Html.HiddenFor(x => x.CalendarId)
                @Html.HiddenFor(x => x.CalendarType)
           @Html.HiddenFor(x=>x.ToGroupIds)
                <div id="eventRepeatsPopUp" class="popUpEvent">
                    <div class="popUpHeader">
                        Repeat
                    </div>
                    <table>
                        <tr>
                            <td colspan="2" class="b">Repeats:
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                @Html.DropDownListFor(x => x.RepeatsFrequencySelectedId, Model.RepeatsFrequencyDropDown, new { @onchange = "RepeatsFrequencyEventChange(this)" })
                            </td>
                        </tr>

                        <tr id="repeatsOnRow">
                            <td colspan="2" class="b">On:
                            </td>
                        </tr>

                        <tr id="repeatsOnRowSel">
                            <td colspan="2">
                                <div class="displayNone checkboxError" id="selectDate">Please Select a Day</div>
                                @Html.CheckBoxFor(x => x.IsSunday, new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })S
                                @Html.CheckBoxFor(x => x.IsMonday, new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })M
                                @Html.CheckBoxFor(x => x.IsTuesday, new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })T
                                @Html.CheckBoxFor(x => x.IsWednesday, new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })W
                                @Html.CheckBoxFor(x => x.IsThursday, new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })T
                                @Html.CheckBoxFor(x => x.IsFriday, new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })F
                                @Html.CheckBoxFor(x => x.IsSaturday, new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })S
                            
                            </td>
                        </tr>

                        <tr id="repeatsOnRowSelMonthly" class="displayNone">
                            <td colspan="2">
                                <div class="displayNone checkboxError" id="selectWeekOfMonth">Please Select Week</div>
                                The @Html.DropDownListFor(x => x.MonthlyIntervalId, Model.MonthlyInterval, new { @onchange = "RepeatsFrequencyEventChange(this)" }) Week of the Month
                           
                            </td>
                        </tr>

                        <tr>
                            <td colspan="2" class="b">Ends:
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                @Html.RadioButtonFor(m => m.EndsWhen, EndsWhenReoccuringEnum.Never.ToString(), new { @checked = "checked", @onchange = "ChangeSummaryOfRepeatedEvent(true)" })
                                @EndsWhenReoccuringEnum.Never.ToString()<br />
                                @Html.RadioButtonFor(m => m.EndsWhen, EndsWhenReoccuringEnum.After.ToString(), new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })
                                @EndsWhenReoccuringEnum.After.ToString()
                                @Html.TextBoxFor(x => x.EndsOccurences, new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })
                                ocurrences.<br />
                                @Html.RadioButtonFor(m => m.EndsWhen, EndsWhenReoccuringEnum.On.ToString(), new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })
                                @EndsWhenReoccuringEnum.On.ToString()
                                @Html.TextBoxFor(x => x.EndsDate, new { @onchange = "ChangeSummaryOfRepeatedEvent(true)" })
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2" class="b">
                                <span id="summaryPopUp"></span>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <input type="button" id="checkInButtonPopUp" value="Done" class="primary" onclick="javascript: CloseReOccuringEventWindow(true)" />
                            </td>
                            <td>
                                <span class="spanLink" onclick="javascript:CloseReOccuringEventWindow(false)">Cancel</span>
                            </td>
                        </tr>
                    </table>
                </div>
   
            }
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        LoadDropDownBackgroundColors();
        Calendar.InitializeNewEvent();
    });
    var d = new Date();
    var curr_date = d.getDate();

    var curr_month = d.getMonth() + 1; //Months are zero based
    if (curr_month < 10) {
        curr_month = "0" + curr_month;
    }
    var curr_year = d.getFullYear();
    var curr_hour = d.getHours();
    var a_p = "";
    if (curr_hour < 12) {
        a_p = "am";
    }
    else {
        a_p = "pm";
    }
    if (curr_hour == 0) {
        curr_hour = 12;
    }
    if (curr_hour > 12) {
        curr_hour = curr_hour - 12;
    }

    var startDate = d;
    var endDate = d;
    $('#StartDate').val(curr_month + "/" + curr_date + "/" + curr_year + " " + curr_hour + ":00 " + a_p);
    $('#EndDate').val(curr_month + "/" + curr_date + "/" + curr_year + " " + curr_hour + ":00 " + a_p);
    $('#EndsDate').val(curr_month + "/" + curr_date + "/" + curr_year);
    $('#StartDate').datetimepicker({
        ampm: true,
        onSelect: function (dateText, inst) {
            startDate = new Date(dateText);
        },
        stepMinute: 10,
        timeFormat: 'hh:mm tt'
    });
    $('#EndDate').datetimepicker({
        ampm: true,
        onSelect: function (dateText, inst) {
            endDate = new Date(dateText);
        },
        stepMinute: 10,
        timeFormat: 'hh:mm tt'
    });
    $('#EndsDate').datepicker();
    function StartDateOnBlur() {
        if (endDate < startDate) {
            $('#EndDate').val($('#StartDate').val());
            endDate = startDate;
        }
    }
    function EndDateOnBlur() {
        if (endDate < startDate) {
            $('#StartDate').val($('#EndDate').val());
            startDate = endDate;
        }
    }
    $("#EndsOccurences").numeric({ negative: false });

    $("#createNewEventForm").validate({
        rules: {
            Name: "required",
            StartDate: { lessThanEqual: "#EndDate", required: true },
            EndDate: { greaterThanEqual: "#StartDate", required: true },
            SelectedLocationId: "required",
            SelectedEventTypeId: "required"
        }
    });
    $(function () {
        tinymce.init({
            mode: "textareas",
            elements: "elm2",
            theme: "advanced",
            skin: "o2k7",
            skin_variant: "silver",
            plugins: "safari,style,layer,table,advhr,advimage,advlink,inlinepopups,preview,media,contextmenu,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template",

            // Theme options
            theme_advanced_buttons1: "bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,bullist,numlist,|,outdent,indent,blockquote,|,formatselect,fontsizeselect",
            theme_advanced_buttons2: "link,unlink,anchor,image,cleanup,code,|,preview,|,forecolor,backcolor,|tablecontrols,|,hr,removeformat,visualaid,|,iespell,media,|,ltr,rtl",
            theme_advanced_buttons3: "",
            theme_advanced_buttons4: "",
            theme_advanced_toolbar_location: "top",
            theme_advanced_toolbar_align: "left",
            theme_advanced_statusbar_location: "bottom",
            theme_advanced_resizing: true,
        });
    });
</script>
