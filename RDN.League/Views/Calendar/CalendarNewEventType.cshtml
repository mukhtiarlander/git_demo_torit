@using RDN.Library.Classes.Calendar
@using RDN.League.Models.Utilities
@using RDN.Library.Cache
@model RDN.League.Models.Calendar.CalendarEventTypeModel
@{
    var memId = RDN.Library.Classes.Account.User.GetMemberId();
    bool isSec = MemberCache.IsSecretaryOrBetterOfLeague(memId);
    ViewBag.Title = "Add New Event Type";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<ol class="breadcrumb">
    <li><a href="@RDN.Utilities.Config.ConfigManager.InternalSite">Home</a></li>
    @if (MemberCache.GetCalendarDefaultView(memId) == RDN.Portable.Classes.Account.Enums.Settings.CalendarDefaultViewEnum.List_View)
    {
        <li><a href="@Url.Content("~/calendar/" + Model.OwnerEntity + "/" + Model.CalendarId.ToString().Replace("-", ""))">Calendar</a></li>
    }
    else
    {
        <li><a href="@Url.Content("~/calendar/view/" + Model.OwnerEntity + "/" + Model.CalendarId.ToString().Replace("-", ""))">Calendar</a></li>
    }
    <li class="active">New Event Type</li>
</ol>

<div class="row">
    <div class="col-xs-12 col-md-10 col-md-offset-1">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="margin-bottom-10 margin-top-5">Add Calendar Event Type</h3>
                <span class="text-muted">
                    Event types are used to describe what type event it is. Creating a Type allows you
                    to assign various point structures to your events. Also when reporting, reports
                    get broken down by what type of event it was and how many each person attended.
                    Therefore giving you a better estimate if a person attended 19 out of 20 mandatory
                    practices when 20 total are required. Be sure to read <b>
                        <a href="http://wiki.rdnation.com/Calendar_and_Attendance_Tracking#Calendar_Point_Types_Explained"
                           target="_blank">Point Types Explained</a>
                    </b> before creating your first event
                    type.
                </span>
            </div>
            @using (Html.BeginForm("CalendarNewEventType", "Calendar", FormMethod.Post, new { @id = "CalendarNewEventType" }))
            {
                <div class="panel-body">
                    <div class="row">
                        <div class="col-xs-12 col-sm-6">
                            <label class="form-label">Name of Event Type</label>
                            <div class="margin-bottom-15">
                                @Html.TextBoxFor(x => x.EventTypeName, new { @class = "form-control" }) <small class="i text-muted">
                                    Mandatory Practice, Event, Team
                                    Function, something recongnizable when running reports and creating events.
                                </small>
                            </div>
                        </div>
                        <div class="col-xs-12 col-sm-6">
                            <label class="form-label">Event Type Color</label>
                            <div class="margin-bottom-15">
                                @Html.DropDownListFor(x => x.ColorTempSelected, Model.ColorList, "Choose Color...", new { @onchange = "ColorSelectorChanged()", @class = "form-control" }) 
                                @if (isSec)
                                { <small class="i text-muted">Add more colors under <a href="@Url.Content("~/league/edit/" + Model.LeagueId.ToString().Replace("-", ""))">Edit League Internal</a><br />&nbsp;</small>
                                }
                                else
                                {
                                    <span>&nbsp;<br />&nbsp;</span>
                                }
                            </div>
                        </div>
                        <div class="col-xs-12 col-sm-6 col-lg-3">
                            <label class="form-label">Points For Being Present</label>
                            <div class="margin-bottom-15">
                                @Html.TextBoxFor(x => x.PointsForPresent, new { @class = "form-control input-sm" })
                            </div>
                        </div>
                        <div class="col-xs-12 col-sm-6 col-lg-3">
                            <label class="form-label">Points For Being Partially There</label>
                            <div class="margin-bottom-15">
                                @Html.TextBoxFor(x => x.PointsForPartial, new { @class = "form-control input-sm" })
                            </div>
                        </div>
                        <div class="col-xs-12 col-sm-6 col-lg-3">
                            <label class="form-label">Points For Being Not Present</label>
                            <div class="margin-bottom-15">
                                @Html.TextBoxFor(x => x.PointsForNotPresent, new { @class = "form-control input-sm" })
                            </div>
                        </div>
                        <div class="col-xs-12 col-sm-6 col-lg-3">
                            <label class="form-label">Points For Being Excused</label>
                            <div class="margin-bottom-15">
                                @Html.TextBoxFor(x => x.PointsForExcused, new { @class = "form-control input-sm" })
                            </div>
                        </div>
                        <div class="col-xs-12 col-sm-6 col-lg-3">
                            <label class="form-label">Points For Being Tardy</label>
                            <div class="margin-bottom-15">
                                @Html.TextBoxFor(x => x.PointsForTardy, new { @class = "form-control input-sm" })
                            </div>
                        </div>
                        <div class="col-xs-12 col-sm-6 col-lg-3">
                            <label class="form-label">Points For Being Tardy</label>
                            <div class="margin-bottom-15">
                                @Html.TextBoxFor(x => x.PointsForTardy, new { @class = "form-control input-sm" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel-footer">
                    <input type="submit" class="btn btn-primary" value="Create Event Type" name="add" />
                    <input type="submit" class="btn btn-primary" value="Create & Add Another" name="addAnother" />
                   @if (ViewBag.IsSuccessful)
                    {
                        <span class="pull-right margin-top-10">Updated Successfully!</span>
                   }
                </div>
                @Html.HiddenFor(x => x.CalendarId)
                @Html.HiddenFor(x => x.OwnerEntity)
            }
        </div>
    </div> 
</div>

<script type="text/javascript">
    $(document).ready(function () {
        LoadDropDownBackgroundColors();
    });
    $("#PointsForPresent").numeric({ negative: false });
    $("#PointsForPartial").numeric({ negative: false });
    $("#PointsForNotPresent").numeric({ negative: false });
    $("#PointsForExcused").numeric({ negative: false });
    $("#PointsForTardy").numeric();

    $("#CalendarNewEventType").validate({
        rules: {
            Name: "required"
        }
    });
</script>
