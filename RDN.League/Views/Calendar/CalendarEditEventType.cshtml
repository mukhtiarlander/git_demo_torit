@using RDN.Library.Classes.Calendar
@using RDN.League.Models.Utilities
@using RDN.Library.Cache
@model RDN.League.Models.Calendar.CalendarEventTypeModel
@{
    var memId = RDN.Library.Classes.Account.User.GetMemberId();
    bool isSec = MemberCache.IsSecretaryOrBetterOfLeague(memId);
    bool isEventsCourd = MemberCache.IsEventsCourdinatorOrBetterOfLeague(memId);
    ViewBag.Title = "Update Event Type";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<ol class="breadcrumb">
    <li><a href="@RDN.Utilities.Config.ConfigManager.InternalSite">Home</a></li>
    @if (MemberCache.GetCalendarDefaultView(memId) == RDN.Portable.Classes.Account.Enums.Settings.CalendarDefaultViewEnum.List_View)
    {
        <li><a href="@Url.Content("~/calendar/" + Model.OwnerEntity + "/" + Model.CalendarId.ToString().Replace("-", ""))">Calendar</a></li>
    }
    else
    {
        <li><a href="@Url.Content("~/calendar/view/" + Model.OwnerEntity + "/" + Model.CalendarId.ToString().Replace("-", ""))">Calendar</a></li>
    }
    <li class="active">Update Event Type</li>
</ol>

<div class="col-md-offset-1  col-md-10  col-xs-12">
    <h2 class="text-center">
        Update Calendar Event Type
    </h2>
</div>

<div class="col-md-offset-1 col-md-10 col-xs-12">
    <div class="panel panel-default">
        <div class="panel-body">





            <div class="titleDescription">
                Event types are used to describe what type event it is. Updating a Type allows you
                to assign various point structures to your events. Also when reporting, reports
                get broken down by what type of event it was and how many each person attended.
                Therefore giving you a better estimate if a person attended 19 out of 20 mandatory
                practices when 20 total are required. Be sure to read <b>
                    <a href="http://wiki.rdnation.com/Calendar_and_Attendance_Tracking#Calendar_Point_Types_Explained"
                       target="_blank">Point Types Explained</a>
                </b> before updating your first event
                type.
            </div>

            <div>
                @using (Html.BeginForm("CalendarEditEventType", "Calendar", FormMethod.Post, new { @id = "CalendarEditEventType" }))
                {
                <table class="table">
                    <tr>
                        <td class="b text-right">
                            Name of Event Type:
                        </td>
                        <td class="largeInput">
                            @Html.TextBoxFor(x => x.EventTypeName, new { @class = "form-control input-sm" }) <small class="i">
                                Mandatory Practice, Event, Team
                                Function, something recongnizable when running reports and creating events.
                            </small>
                        </td>
                    </tr>
                    <tr>
                        <td class="b text-right">
                            Event Type Color:
                        </td>
                        <td class="largeInput">
                            @Html.DropDownListFor(x => x.ColorTempSelected, Model.ColorList, "Choose Color...", new { @onchange = "ColorSelectorChanged()", @class = "form-control" }) @if (isSec)
                                {<small class="i">Add more colors under <a href="@Url.Content("~/league/edit/" + Model.LeagueId.ToString().Replace("-", ""))">Edit League Internal</a></small>}
                        </td>
                    </tr>
                    <tr>
                        <td class="b text-right">
                            Points For Being Present:
                        </td>
                        <td class="smallInput">
                            @Html.TextBoxFor(x => x.PointsForPresent, new { @class = "form-control input-sm" })
                        </td>
                    </tr>
                    <tr>
                        <td class="b text-right">
                            Points For Being Partially There:
                        </td>
                        <td class="smallInput">
                            @Html.TextBoxFor(x => x.PointsForPartial, new { @class = "form-control input-sm" })
                        </td>
                    </tr>
                    <tr>
                        <td class="b text-right">
                            Points For Being Not Present:
                        </td>
                        <td class="smallInput">
                            @Html.TextBoxFor(x => x.PointsForNotPresent, new { @class = "form-control input-sm" })
                        </td>
                    </tr>
                    <tr>
                        <td class="b text-right">
                            Points For Being Excused:
                        </td>
                        <td class="smallInput">
                            @Html.TextBoxFor(x => x.PointsForExcused, new { @class = "form-control input-sm" })
                        </td>
                    </tr>
                    <tr>
                        <td class="b text-right">
                            Points For Being Tardy:
                        </td>
                        <td class="smallInput">
                            @Html.TextBoxFor(x => x.PointsForTardy, new { @class = "form-control input-sm" })
                        </td>
                    </tr>
                    <tr>
                        <td></td>
                        <td>
                            <input type="submit" class="btn btn-primary" value="Update Event Type" name="add" />
                        </td>
                    </tr>
                </table>
                @Html.HiddenFor(x => x.CalendarId)
                @Html.HiddenFor(x => x.OwnerEntity)
                @Html.HiddenFor(x => x.CalendarEventTypeId)
                }
            </div>
        </div>

    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        LoadDropDownBackgroundColors();
    });
    $("#PointsForPresent").numeric({ negative: false });
    $("#PointsForPartial").numeric({ negative: false });
    $("#PointsForNotPresent").numeric({ negative: false });
    $("#PointsForExcused").numeric({ negative: false });
    $("#PointsForTardy").numeric();

    $("#CalendarEditEventType").validate({
        rules: {
            Name: "required"
        }
    });
</script>
