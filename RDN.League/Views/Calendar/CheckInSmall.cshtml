@using RDN.League.Models.Calendar
@using RDN.League.Models.Utilities
@using RDN.Library.Classes.Calendar.Enums
@using RDN.Library.Cache
@using RDN.Portable.Classes.Controls.Calendar.Enums
@model NewCalendarEvent
@{
    ViewBag.Title = "Check Members Into " + Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
    Guid memId = RDN.Library.Classes.Account.User.GetMemberId();
    var attendees = Model.Attendees.Where(x => x.IsCheckedIn).ToList();
}
<ol class="breadcrumb">
    <li><a href="@RDN.Library.Classes.Config.LibraryConfig.InternalSite">Home</a></li>
    @if (MemberCache.GetCalendarDefaultView(memId) == RDN.Portable.Classes.Account.Enums.Settings.CalendarDefaultViewEnum.List_View)
    {
        <li><a href="@Url.Content("~/calendar/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + Model.StartDate.Year + "/" + Model.StartDate.Month) ">Calendar</a></li>
    }
    else
    {
        <li><a href="@Url.Content("~/calendar/view/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", ""))">Calendar</a></li>
    }
    <li><a href="@Url.Content("~/calendar/event/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + Model.CalendarItemId.ToString().Replace("-", ""))">@Model.Name</a></li>
    <li class="active">Check In</li>
</ol>


<div class="row">
    <div class="col-xs-12 col-md-10 col-md-offset-1 col-lg-8 col-lg-offset-2">
        <div class="panel panel-default">
            <div class="panel-heading">
                <div class="row">
                    <div class="col-xs-2">
                        @if (Model.PreviousEventId != new Guid())
                        {
                            <a class="btn btn-default" href="@Url.Content("~/calendar/event/checkin-s/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + Model.PreviousEventId.ToString().Replace("-", ""))"><i class="fa fa-backward fa-lg" title="Last Event"></i></a>
                        }
                    </div>
                    <div class="col-xs-8 text-center">
                        <h3 class="margin-bottom-5 margin-top-5">Check Members Into "@Model.Name"</h3>
                    </div>
                    <div class="col-xs-2 text-right">
                        @if (Model.NextEventId != new Guid())
                        {
                            <a class="btn btn-default" href="@Url.Content("~/calendar/event/checkin-s/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + Model.NextEventId.ToString().Replace("-", ""))"><i class="fa fa-forward fa-lg" title="Next Event"></i></a>
                        }
                    </div>
                </div>
            </div>
            <div class="panel-heading">
                @using (Html.BeginForm("ExportEventRoster", "Calendar", FormMethod.Post, new { @id = "EventReport" }))
                {
                    <button type="submit" class="btn btn-info btn-sm">
                        <i class="fa fa-file-excel-o"></i> Export
                        @Html.HiddenFor(x => x.CalendarId)
                        @Html.HiddenFor(x => x.CalendarItemId)
                        @Html.HiddenFor(x => x.CalendarReoccurringId)
                    </button>
                }
            </div>
            <div class="panel-body">
                <div class="panel panel-default">
                    <div class="panel-body no-padding">
                        <table class="table">
                            <tr class="trBorderB">
                                <td class="b text-right">
                                    Date and Time:
                                </td>
                                <td>
                                    @Model.StartDate.ToLongDateString()
                                    <div>@Model.StartDate.ToShortTimeString() - @Model.EndDate.ToShortTimeString()</div>
                                </td>
                            </tr>

                            <tr class="trBorderB">
                                <td class="b text-right">
                                    Check In Members:
                                </td>
                                <td>
                                    @Html.DropDownListFor(x => x.SelectedMemberId, new SelectList(Model.MembersToCheckIn, "MemberId", "SiteName"), "Check In Member...", new { @class = "form-control" })
                                    <span class="red" id="warning"></span>
                                </td>
                            </tr>
                            <tr class="trBorderB">
                                <td class="b text-right">
                                    Check In Points:
                                </td>
                                <td>
                                    @if (Model.EventType != null)
                                    {
                                        <label>
                                            <input type="radio" name="PointTypes" points="@Model.EventType.PointsForPresent" id="@CalendarEventPointTypeEnum.Present.ToString()" checked="checked" value="@CalendarEventPointTypeEnum.Present.ToString()" />
                                            <b>@Model.EventType.PointsForPresent</b>
                                            @CalendarEventPointTypeEnum.Present
                                        </label>
                                        <label>
                                            <input type="radio" name="PointTypes" points="@Model.EventType.PointsForPartial" id="@CalendarEventPointTypeEnum.Partial.ToString()" value="@CalendarEventPointTypeEnum.Present.ToString()" />
                                            <b>@Model.EventType.PointsForPartial</b>
                                            @CalendarEventPointTypeEnum.Partial
                                        </label>
                                        <label>
                                            <input type="radio" name="PointTypes" points="@Model.EventType.PointsForNotPresent" id="@CalendarEventPointTypeEnum.Not_Present.ToString()" value="@CalendarEventPointTypeEnum.Present.ToString()" />
                                            <b>@Model.EventType.PointsForNotPresent</b>
                                            @RDN.Utilities.Enums.EnumExt.ToFreindlyName(CalendarEventPointTypeEnum.Not_Present)
                                        </label>
                                        <label>
                                            <input type="radio" name="PointTypes" points="@Model.EventType.PointsForExcused" id="@CalendarEventPointTypeEnum.Excused.ToString()" value="@CalendarEventPointTypeEnum.Present.ToString()" />
                                            <b>@Model.EventType.PointsForExcused</b>
                                            @CalendarEventPointTypeEnum.Excused
                                        </label>

                                        <br />
                                        <div class="col-xs-3">
                                            <input value="0" type="text" name="additionalPoints" class="form-control input-sm" id="additionalPoints" />
                                        </div>
                                        <small>
                                            Additional Pts. Add or subtract points. exp: -1 or 10<br />
                                            <a href="@RDN.Library.Classes.Config.LibraryConfig.WikiSite/Calendar_and_Attendance_Tracking#Calendar_Point_Types_Explained" target="_blank">Point Types Explained</a>
                                        </small>

                                    }
                                </td>
                            </tr>
                            <tr class="trBorderB">
                                <td class="b text-right">
                                    Is Tardy?:
                                </td>
                                <td>
                                    <label>
                                        <input type="checkbox" id="isTardy" points="@Model.EventType.PointsForTardy" />
                                        <b>@Model.EventType.PointsForTardy</b> Points
                                    </label>
                                </td>
                            </tr>
                            <tr class="trBorderB">
                                <td class="b text-right">
                                    Check In Note:
                                </td>
                                <td>
                                    <input type="text" id="noteCheckIn" class="form-control" />
                                </td>
                            </tr>
                            @if (Model.GroupsForEvent.Count > 0)
                            {
                                <tr class="trBorderB">
                                    <td class="b text-right">
                                        Groups:
                                    </td>
                                    <td>
                                        @foreach (var g in Model.GroupsForEvent)
                                        {
                                            <span>@g.GroupName; </span>
                                        }
                                    </td>
                                </tr>
                            }
                          
                        </table>
                    </div>
                    <div class="panel-footer">
                        <button type="button" id="checkInMember" class="btn btn-primary text-center" onclick="javascript:Calendar.checkInMemberSmall()" >
                            <i class="fa fa-check-circle"></i> Check In Member
                        </button>
                    </div>
                </div>
                <div class="panel panel-default">
                 <div class="panel-heading">
                     <h4 class="margin-top-5 margin-bottom-5">Members Checked In</h4>
                 </div>
                 <div class="panel-body no-padding">
                     <table id="checkInMembers" class="table table-hover">
                         <thead class="vmTableHead">
                             <tr>
                                 <th></th>
                                 <th>
                                     Number
                                 </th>
                                 <th>
                                     Name
                                 </th>
                                 <th>
                                     Point Type
                                 </th>
                                 <th>
                                     Points
                                 </th>
                                 <th></th>
                             </tr>
                         </thead>
                         <tbody>
                             @if (attendees.Count == 0)
                             {
                                 <tr>
                                     <td></td>
                                     <td></td>
                                     <td></td>
                                     <td></td>
                                     <td></td>
                                 </tr>
                             }
                             @for (int i = 0; i < attendees.Count; i++)
                             {
                                 <tr id="@attendees[i].MemberId-row" class="@(String.IsNullOrEmpty(attendees[i].Note) ? "trBorderB" : String.Empty)">
                                     <td class="b">
                                         @(i + 1).
                                     </td>
                                     <td>
                                         @attendees[i].PlayerNumber
                                     </td>
                                     <td>
                                         <a target="_blank" href="@Url.Content("~/member/" + attendees[i].MemberId.ToString().Replace("-", "") + "/" + attendees[i].DerbyName)">
                                             @attendees[i].SiteName
                                         </a>
                                     </td>
                                     <td>
                                         @RDN.Utilities.Enums.EnumExt.ToFreindlyName(attendees[i].PointType)
                                         @if (attendees[i].SecondaryPointType == CalendarEventPointTypeEnum.Tardy)
                                         { <span>
                                             - @RDN.Utilities.Enums.EnumExt.ToFreindlyName(attendees[i].SecondaryPointType)
                                         </span> }
                                     </td>
                                     <td>
                                         @attendees[i].PointsStringForReading
                                     </td>
                                     <td>
                                         <button type="button" class="btn btn-danger btn-sm" onclick="javascript:Calendar.checkInRemoveSmall(this,'@attendees[i].MemberId', '@attendees[i].DerbyName.Replace("'", "")')"><i class="fa fa-trash"></i></button>
                                     </td>
                                 </tr>
                                 if (!String.IsNullOrEmpty(attendees[i].Note))
                                 {
                                     <tr class="trBorderB" id="@attendees[i].MemberId-row2">
                                         <td class="i veNote" colspan="6">
                                             @attendees[i].Note
                                         </td>
                                     </tr>
                                 }
                             }
                         </tbody>
                     </table>

                 </div>
             </div>
                @Html.HiddenFor(x => x.CalendarId)
                @Html.HiddenFor(x => x.CalendarItemId)
            </div>
        </div>
    </div>
</div>
