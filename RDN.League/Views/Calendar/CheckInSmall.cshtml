@using RDN.League.Models.Calendar
@using RDN.League.Models.Utilities
@using RDN.Library.Classes.Calendar.Enums
@using RDN.Library.Cache
@using RDN.Portable.Classes.Controls.Calendar.Enums
@model NewCalendarEvent
@{
    ViewBag.Title = "Check Members Into " + Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
    Guid memId = RDN.Library.Classes.Account.User.GetMemberId();
    var attendees = Model.Attendees.Where(x => x.IsCheckedIn).ToList();
}
<div class="fixedContainer">
    <div class="fixedlinksContainter">
        <div class="backLink">
            @if (MemberCache.GetCalendarDefaultView(memId) == RDN.Portable.Classes.Account.Enums.Settings.CalendarDefaultViewEnum.List_View)
            {
                <span>< <a href="@Url.Content("~/calendar/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", ""))">Calendar</a></span>
            }
            else
            { 
                <span>< <a href="@Url.Content("~/calendar/view/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", ""))">Calendar</a></span>
            }
            <span>< <a href="@Url.Content("~/calendar/event/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + Model.CalendarItemId.ToString().Replace("-", ""))">View Event</a></span>
        </div>
        <div class="rightBackLink">
            @if (Model.PreviousEventId != new Guid())
            { 
                <span>< <a href="@Url.Content("~/calendar/event/checkin-s/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + Model.PreviousEventId.ToString().Replace("-", ""))">Previous Event</a></span>
            }
            @if (Model.NextEventId != new Guid())
            { 
                <span><a href="@Url.Content("~/calendar/event/checkin-s/" + Model.CalendarType + "/" + Model.CalendarId.ToString().Replace("-", "") + "/" + Model.NextEventId.ToString().Replace("-", ""))">Next Event</a> ></span>
            }

        </div>
    </div>
    <div class="fixedCenterContainter">
        <div class="fixTitle">
            Check Members Into @Model.Name
        </div>
        <div class="tvChanges">
            <div class="inputIcons">
                @using (Html.BeginForm("ExportEventRoster", "Calendar", FormMethod.Post, new { @id = "EventReport" }))
                {
                    <input title="Export Roster" type="image" src="@Url.Content("~/Content/images/icons/docs/excel.png")" />
                    <span>Export
                   @Html.HiddenFor(x => x.CalendarId)
                        @Html.HiddenFor(x => x.CalendarItemId)
                        @Html.HiddenFor(x => x.CalendarReoccurringId)
                    </span>
                }
            </div>
        </div>
   <div class="clearLeft"></div>
        <div class="titleDescription">
            This page is used to check members into the event using a manager or owner account.
            Only managers and owners can check users in. Its built for using on a mobile device
            or laptop at the actual event it self.
        </div>
        <div class="divider"></div>

        <div>
            <table class="viewEventTable">

                <tr class="trBorderB">
                    <td class="veLC">Date and Time:
                    </td>
                    <td>
                        @Model.StartDate.ToLongDateString()
                        <div>@Model.StartDate.ToShortTimeString() - @Model.EndDate.ToShortTimeString()</div>
                    </td>
                </tr>

                <tr class="trBorderB">
                    <td class="veLC">Check In Members:
                    </td>
                    <td>
                        @Html.DropDownListFor(x => x.SelectedMemberId, new SelectList(Model.MembersToCheckIn, "MemberId", "MemberName"), "Check In Member...")
                        <span class="red" id="warning"></span>
                    </td>
                </tr>
                <tr class="trBorderB">
                    <td class="veLC">Check In Points:
                    </td>
                    <td>
                        @if (Model.EventType != null)
                        { 
                            <input type="radio" name="PointTypes" points="@Model.EventType.PointsForPresent" id="@CalendarEventPointTypeEnum.Present.ToString()" checked="checked"  value="@CalendarEventPointTypeEnum.Present.ToString()" />
                            <b>@Model.EventType.PointsForPresent</b>
                            @CalendarEventPointTypeEnum.Present
                            <input type="radio" name="PointTypes" points="@Model.EventType.PointsForPartial" id="@CalendarEventPointTypeEnum.Partial.ToString()" value="@CalendarEventPointTypeEnum.Present.ToString()" />
                            <b>@Model.EventType.PointsForPartial</b>
                            @CalendarEventPointTypeEnum.Partial
                            <input type="radio" name="PointTypes" points="@Model.EventType.PointsForNotPresent" id="@CalendarEventPointTypeEnum.Not_Present.ToString()" value="@CalendarEventPointTypeEnum.Present.ToString()" />
                            <b>@Model.EventType.PointsForNotPresent</b>
                            @RDN.Utilities.Enums.EnumExt.ToFreindlyName(CalendarEventPointTypeEnum.Not_Present)
                            <input type="radio" name="PointTypes" points="@Model.EventType.PointsForExcused" id="@CalendarEventPointTypeEnum.Excused.ToString()" value="@CalendarEventPointTypeEnum.Present.ToString()" />
                            <b>@Model.EventType.PointsForExcused</b>
                            @CalendarEventPointTypeEnum.Excused
                               <div class="smallInput">
                                <input value="0" type="text" name="additionalPoints" id="additionalPoints" />
                                Additional Pts. <span class="i">Add or subtract points. exp: -1 or 10</span>
                            </div>
                            <a href="http://wiki.rdnation.com/Calendar_and_Attendance_Tracking#Calendar_Point_Types_Explained" target="_blank">Point Types Explained</a>
                        }
                    </td>
                </tr>
                <tr class="trBorderB">
                    <td class="veLC">Is Tardy?:
                    </td>
                    <td>
                        <input type="checkbox" id="isTardy" points="@Model.EventType.PointsForTardy" />
                        <b>@Model.EventType.PointsForTardy</b> Points
                    </td>
                </tr>
                <tr class="trBorderB">
                    <td class="veLC">Check In Note:
                    </td>
                    <td>
                        <input type="text" id="noteCheckIn" />
                    </td>
                </tr>
                @if (Model.GroupsForEvent.Count > 0)
                { 
                    <tr class="trBorderB">
                        <td class="veLC">Groups:
                        </td>
                        <td>
                            @foreach (var g in Model.GroupsForEvent)
                            { 
                                <span>@g.GroupName; </span>
                            }
                        </td>
                    </tr>
                }
                <tr class="trBorderB">
                    <td colspan="2" class="center">
                        <input type="button" id="checkInMember" class="primary center" value="Check In Member"
                            onclick="javascript: Calendar.checkInMemberSmall()" />
                    </td>
                </tr>
                <tr class="trBorderB">
                    <td class="veLC">Members Checked In:
                    </td>
                    <td>
                        <table id="checkInMembers">
                            <thead class="vmTableHead">
                                <tr>
                                    <th></th>
                                    <th>Number
                                    </th>
                                    <th>Name
                                    </th>
                                    <th>Point Type
                                    </th>
                                    <th>Points
                                    </th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (attendees.Count == 0)
                                { 
                                    <tr>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                        <td></td>
                                    </tr> 
                                }
                                @for (int i = 0; i < attendees.Count; i++)
                                {   
                                    <tr id="@attendees[i].MemberId-row"  class="@(String.IsNullOrEmpty(attendees[i].Note) ? "trBorderB" : String.Empty)">
                                        <td class="b">@(i + 1).
                                        </td>
                                        <td>@attendees[i].MemberNumber
                                        </td>
                                        <td>
                                            <a target="_blank" href="@Url.Content("~/member/" + attendees[i].MemberId.ToString().Replace("-", "") + "/" + attendees[i].MemberName)">
                                                @attendees[i].MemberName</a>
                                        </td>
                                        <td>@RDN.Utilities.Enums.EnumExt.ToFreindlyName(attendees[i].PointType)
                                            @if (attendees[i].SecondaryPointType == CalendarEventPointTypeEnum.Tardy)
                                            { <span>- @RDN.Utilities.Enums.EnumExt.ToFreindlyName(attendees[i].SecondaryPointType)
                                            </span> }
                                        </td>
                                        <td>
                                            @attendees[i].PointsStringForReading
                                        </td>
                                        <td>
                                            <span  class="spanLink" onclick="javascript:Calendar.checkInRemoveSmall(this,'@attendees[i].MemberId', '@attendees[i].MemberName.Replace("'", "")')">Remove</span>
                                        </td>
                                    </tr> 
                                            if (!String.IsNullOrEmpty(attendees[i].Note))
                                            { 
                                    <tr class="trBorderB" id="@attendees[i].MemberId-row2" >
                                        <td class="i veNote" colspan="6">@attendees[i].Note
                                        </td>
                                    </tr>         
                                            }
                                }
                            </tbody>
                        </table>
                    </td>
                </tr>
            </table>
            @Html.HiddenFor(x => x.CalendarId)
            @Html.HiddenFor(x => x.CalendarItemId)
        </div>
    </div>
</div>
