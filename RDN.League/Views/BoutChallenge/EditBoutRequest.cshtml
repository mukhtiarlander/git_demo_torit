@model RDN.Library.Classes.League.BoutList
@{
    ViewBag.Title = "Edit Bout Request";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="fixedContainer">
    <div class="fixedlinksContainter">
        <div class="backLink">
            < <a  href="@Url.Content("~/boutchallenge/view/all")">Cancel Edit</a>
        </div>
    </div>
    <div class="fixedCenterContainter">
        <div class="fixTitle">
            Request for Bout Challenge
        </div>
        <div class="tvChanges">
            <div class="navIcons">
                <a onclick="return confirm('Close the Request Because You Found a League?')" title="Close Request" href="@Url.Content("~/boutchallenge/close/" + Model.ChallengeId + "/" + Model.LeagueId.ToString().Replace("-", ""))">
                    <img  src="@Url.Content("~/Content/images/icons/close.png")"  />Close
                </a>
            </div>
            <div class="navIcons">
                <a onclick="return confirm('Really Delete?')" title="Delete Request" href="@Url.Content("~/boutchallenge/delete/" + Model.ChallengeId + "/" + Model.LeagueId.ToString().Replace("-", ""))">
                    <img  src="@Url.Content("~/Content/images/icons/delete.png")"  />Delete
                </a>
            </div>
        </div>
        <div class="titleDescription">
            Edit/Close a bout challenge here for your league.  You are requesting other leagues to play you.  While some of these questions are more for the host, if your league is traveling, you can also add a request.
     
        </div>

        <div class="divider"></div>

        <div>
            @using (Html.BeginForm("EditBoutRequest", "BoutChallenge", FormMethod.Post, new { @id = "editRequest" }))
            {
                <table class="addForumPostTbl">
                    @Html.HiddenFor(x => x.ChallengeId)
                    <tr>
                        <td class="b alRight">Location:
                        </td>
                        <td class="largeInput">
                            @Html.TextBoxFor(x => x.Location)
                        </td>
                    </tr>
                    <tr>
                        <td class="b alRight">Start Date of Game:
                        </td>
                        <td class="largeInput">
                            @Html.TextBoxFor(models => models.StartDateOfEvent, new { @class = "jquery_datepicker", @Value = Model.StartDateOfEvent > new DateTime() ? Model.StartDateOfEvent.ToString("MM/dd/yyyy") : "" })

                        </td>
                    </tr>
                    <tr>
                        <td class="b alRight">End Date of Game:
                        </td>
                        <td class="largeInput">
                            @Html.TextBoxFor(models => models.EndDateOfEvent, new { @class = "jquery_datepicker", @Value = Model.EndDateOfEvent > new DateTime() ? Model.EndDateOfEvent.ToString("MM/dd/yyyy") : "" }) <span class="i">If there is no specific date required</span>

                        </td>
                    </tr>
                    <tr>
                        <td class="b alRight">Crowd Size:
                        </td>
                        <td class="largeInput">
                            @Html.TextBoxFor(x => x.CrowdSize) <span class="i">1-9999</span>
                        </td>
                    </tr>
                    <tr>
                        <td class="b alRight">Current Ranking:</td>
                        <td class="largeInput">
                            @Html.TextBoxFor(x => x.CurrentRanking) <span class="i">Exp: 150 WFTDA, 110 FlatTrackStats</span>
                        </td>
                    </tr>
                    <tr>
                        <td class="b alRight">Can Offer Travel Stipend:
                        </td>
                        <td>
                           <label> @Html.CheckBoxFor(x => x.IsOfferTravelStipend) <span class="i">Can you help pay travel expenses?</span></label>
                        </td>
                    </tr>
                     <tr>
                        <td class="b alRight">Travel Stipend Amount:
                        </td>
                        <td class="largeInput">
                            @Html.TextBoxFor(x => x.TravelStipendAmount)
                        </td>
                    </tr>
                   
                    <tr>
                        <td class="b alRight">Live Online:
                        </td>
                        <td>
                            <label>@Html.CheckBoxFor(x => x.IsStreamLive) <span class="i">Do you broadcast games live online/TV?</span></label>
                        </td>
                    </tr>
                    <tr>
                        <td class="b alRight">Offer Housing:
                        </td>
                        <td>
                            <label>@Html.CheckBoxFor(x => x.IsSkaterHousingOffered) <span class="i">Can your league offer housing?</span></label>

                        </td>
                    </tr>
                    <tr>
                        <td class="b alRight">Hang Over Bout Offered:
                        </td>
                        <td>
                            <label>@Html.CheckBoxFor(x => x.IsHangOverBoutOffered)<span class="i">@Html.LabelFor(x => x.IsHangOverBoutOffered, "Check if Hang Over Bout Offered.")</span>
                            </label>
                        </td>
                    </tr>
                     <tr>
                        <td class="b alRight">Is Away Game:
                        </td>
                        <td><label>@Html.CheckBoxFor(x => x.IsAwayGame)<span class="i">Looking for an Away game rather than a home game?</span></label>

                        </td>
                    </tr>
                       <tr>
                        <td class="b alRight">Display To Public:
                        </td>
                        <td><label>@Html.CheckBoxFor(x => x.DisplayToPublic)<span class="i">Will be shown publicly to anyone visiting RDNation.com.</span></label>

                        </td>
                    </tr>
                    <tr>
                        <td class="b alRight">Select Rule Set:
                        </td>
                        <td class="largeInput">
                            @Html.DropDownListFor(x => x.RuleSetId, new SelectList(ViewBag.RuleSets, "Value", "Text"))

                        </td>
                    </tr>
                    <tr>
                        <td class="b alRight">Event Information:
                        </td>
                        <td class="largeInput"></td>
                    </tr>
                    <tr>
                        <td colspan="2">

                            @Html.TextArea("EventInformation", new
                           {
                               id = "wmd-input",
                               @Value = Model.EventInformation != null ? Model.EventInformation.ToString() : "",
                               style = "width:700px"
                           })

                        </td>
                    </tr>
                    <tr>
                        <td class="b alRight"></td>
                        <td class="largeInput">
                            <input type="submit" class="primary" value="Save Request" name="saveRequest" />

                        </td>
                    </tr>

                </table>    
                @Html.HiddenFor(x => x.ChallengeId)           
            }
        </div>
    </div>
</div>
<script type="text/javascript">
    $("#editRequest").validate({
        rules: {
            Location: "required",
            DateOfEvent: "required"
        }
    });
    $('#EndDateOfEvent').datepicker({
        onSelect: function () { },
        onClose: function () { $(this).focus(); }
    });
    $('#StartDateOfEvent').datepicker({
        onSelect:
          function (dateText, inst) {
              $('#EndDateOfEvent').datepicker("option", 'minDate', new Date(dateText));
          },
        onClose: function () { $(this).focus(); }
    });
    $(function () {
        tinymce.init({
            mode: "textareas",
            elements: "elm2",
            theme: "advanced",
            skin: "o2k7",
            skin_variant: "silver",
            plugins: "safari,style,layer,table,advhr,advimage,advlink,inlinepopups,preview,media,contextmenu,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template",

            // Theme options
            theme_advanced_buttons1: "bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,bullist,numlist,|,outdent,indent,blockquote,|,formatselect,fontsizeselect",
            theme_advanced_buttons2: "link,unlink,anchor,image,cleanup,code,|,preview,|,forecolor,backcolor,|tablecontrols,|,hr,removeformat,visualaid,|,iespell,media,|,ltr,rtl",
            theme_advanced_buttons3: "",
            theme_advanced_buttons4: "",
            theme_advanced_toolbar_location: "top",
            theme_advanced_toolbar_align: "left",
            theme_advanced_statusbar_location: "bottom",
            theme_advanced_resizing: true,
        });
    });
</script>

