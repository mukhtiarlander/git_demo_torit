@model RDN.League.Models.Store.StoreItemDisplayModel
@{
    ViewBag.Title = "Edit Store Item";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<ol class="breadcrumb">
    <li><a href="#">Home</a></li>
    <li><a href="@Url.Content("~/store/home/" + Model.PrivateManagerId.ToString().Replace("-", "") + "/" + Model.MerchantId.ToString().Replace("-", ""))">Shop</a></li>
    <li class="active">@Model.Name</li>
</ol>
<h2>
    Edit @Model.Name
</h2>


<div>
    @using (Html.BeginForm("StoreEditItem", "Store", FormMethod.Post, new { @id = "createNewItem" }))
    {
        <div class="form-group">
            <label for="Name" class="control-label">Name</label>
            @Html.TextBoxFor(x => x.Name, new { @class = "form-control", @placeholder = "Name" })
        </div>
        <div class="form-group">
            <label for="ArticleNumber" class="control-label">Your ID</label>
            @Html.TextBoxFor(x => x.ArticleNumber, new { @class = "form-control", @placeholder = "Specific Article Id" })
        </div>
        <div class="form-group">
            <label for="Description" class="control-label">Description Of Item</label>
            @Html.TextBoxFor(x => x.Description, new { @class = "form-control", @placeholder = "Description of the item" })
        </div>
        <div class="form-group">
            <label for="Weight" class="control-label">Weight</label>
            @Html.TextBoxFor(x => x.Weight, new { @class = "form-control", @placeholder = "weight in lbs" })
            lbs
        </div>
        <div class="form-group">
            <label for="Price" class="control-label">Price</label>
            @Html.TextBoxFor(x => x.Price, Model.Price.ToString("N2"), new { @class = "form-control", @placeholder = "" })
            @Model.Currency
        </div>
        <div class="form-group">
            <label for="CanPickUpLocally" class="control-label">Local Pickup</label>
            @Html.CheckBoxFor(x => x.CanPickUpLocally, new { @placeholder = "" })
        </div>
        <div class="form-group">
            <label for="Shipping" class="control-label">Shipping Costs</label>
            @Html.TextBox("Shipping", Model.Shipping.ToString("N2"), new { @class = "form-control", @placeholder = "" })

        </div>
        <div class="form-group">
            <label for="ShippingAdditional" class="control-label">Additional Shipping Costs</label>
            @Html.TextBox("ShippingAdditional", Model.ShippingAdditional.ToString("N2"), new { @class = "form-control", @placeholder = "" })
            <small>For each item of this type bought, this shipping fee will be charged.</small>
        </div>
        <div class="form-group">
            <label for="QuantityInStock" class="control-label">Quantity In Stock</label>
            @Html.TextBoxFor(x => x.QuantityInStock, new { @class = "form-control", @placeholder = "" })
        </div>
        <div class="form-group">
            <label for="CanRunOutOfStock" class="control-label">Can This Item Ever Run Out?</label>
            @Html.CheckBoxFor(x => x.CanRunOutOfStock, new { @placeholder = "" }) <small>Items in stock count down if checked.</small>
        </div>
        <div class="form-group">
            <label for="ItemType" class="control-label">Type Of Item</label>
            @Html.DropDownListFor(x => x.ItemType, Model.ItemTypeSelectList, "Choose Type...", new { @onchange = "TypeOfStoreItemSelected(this)", @class = "form-control", @placeholder = "" }) - <small>To Add Type, Email us at <a href="mailto:info@rdnation.com">info@rdnation.com</a></small>
        </div>
        <div class="form-group @(Model.ItemType == RDN.Portable.Classes.Store.Enums.StoreItemTypeEnum.Shirt ? "" : "displayNone")" id="shirtSize">
            <label for="ItemType" class="control-label">Sizes</label>
            <div >
                @Html.CheckBoxFor(x => x.HasExtraSmall)X-Small
                @Html.CheckBoxFor(x => x.HasSmall)Small
                @Html.CheckBoxFor(x => x.HasMedium)Medium
                @Html.CheckBoxFor(x => x.HasLarge)Large
                @Html.CheckBoxFor(x => x.HasExtraLarge)X-Large
                @Html.CheckBoxFor(x => x.HasXXLarge)XX-Large
            </div>
        </div>
        <div class="form-group @(Model.ItemType == RDN.Portable.Classes.Store.Enums.StoreItemTypeEnum.Decal ? "" : "displayNone") " id=" colors">
            <label for="ColorTempSelected" class="control-label">Colors of Item</label>
            <div >
                @Html.DropDownListFor(x => x.ColorTempSelected, Model.ColorList, "Choose Colors...", new { @onchange = "ColorSelectorChanged()", @class = "form-control", @placeholder = "" })  <span class="spanLink" onclick="AddSelectedColor()">Add Selected</span>
                <div><b>OR</b></div>
                <div>
                    <input id="colorName" placeholder="Name Of New Color" />
                    <div id="colorSelector" class="colorPickerC">
                        <div class="colorPickerIn" style="background-color: #0000ff;"></div>
                    </div>
                    <span class="spanLink" onclick="CreateNewColor()">Create New Color</span>
                    <div id="colorSelected" class="displayNone"></div>
                </div>

                <div id="colorsToAdd">
                    @foreach (var color in Model.Colors)
                    {
                        <div class='selectedColorCon'>
                            <div class='selectedColor' style='background-color:@color.HexColor;'>@color.NameOfColor</div>
                            <span class='spanLink' onclick="RemoveSelectedColor(this, '@color.HexColor')">Remove</span>
                        </div>
                    }
                </div>
                @Html.HiddenFor(x => x.ColorsSelected)
            </div>
        </div>
        <div class="form-group">
            <label for="IsPublished" class="control-label">Publish Item</label>
            @Html.CheckBoxFor(x => x.IsPublished, new { @placeholder = "" }) - This will <span class="b">PUBLISH</span>
            the item for the public store.
        </div>
        <div class="form-group">
            <label for="HtmlNote" class="control-label">Public Description</label>
            @Html.TextArea("HtmlNote", Model.HtmlNote, new
                           {
                               id = "wmd-input",
                               style = "width:720px;"
                           })
        </div>
        <a class="btn btn-default" href="@Url.Content("~/store/home/" + Model.PrivateManagerId.ToString().Replace("-", "") + "/" + Model.MerchantId.ToString().Replace("-", ""))">Cancel Item</a>
        <input type="submit" class="btn btn-success" value="Update Item" />

        @Html.HiddenFor(x => x.PrivateManagerId)
        @Html.HiddenFor(x => x.MerchantId)
        @Html.HiddenFor(x => x.InternalId)
        @Html.HiddenFor(x => x.StoreItemId)
    }
</div>

<div class="panelBox">
    <div class="panelBoxTitle">
        Upload Pictures
    </div>
    <div class="divider"></div>
    @using (Html.BeginForm("UploadItemPictures", "Store", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        <div>
            Upload up to four images for each item. The first picture uploaded will be the default
            picture everyone sees.
        </div>
        <br />

        foreach (var image in Model.Photos)
        {
            <div class="center">
                <img src="@image.ImageUrl" alt="@image.Alt" id="image-@image.PhotoId" style="max-width:150px; max-height:150px;" />
                <br />
                <span class="spanLink" id="button-@image.PhotoId" onclick="DeleteStorePhoto('@image.PhotoId', '@Model.StoreItemId', '@Model.PrivateManagerId')">Delete</span>
            </div>
        }
        if (Model.Photos.Count < 1)
        {
            <div class="center">
                <span class="b">Upload Default Picture</span>
                <input type="file" name="file" id="file" class="fileUpload" onchange="ValidatePhoto(this)" />
            </div>
        }
        if (Model.Photos.Count < 2)
        {
            <div class="center">
                <span class="b">Second</span>
                <input type="file" name="file1" id="file1" class="fileUpload" onchange="ValidatePhoto(this)" />
            </div>
        }
        if (Model.Photos.Count < 3)
        {
            <div class="center">
                <span class="b">Third</span>
                <input type="file" name="file2" id="file2" class="fileUpload" onchange="ValidatePhoto(this)" />
            </div>
        }
        if (Model.Photos.Count < 4)
        {
            <div class="center">
                <span class="b">Fourth</span>
                <input type="file" name="file3" id="file3" class="fileUpload" onchange="ValidatePhoto(this)" />
            </div>
        }
        <div class="clear">
        </div>

        <div class="updateMemberButton">
            <input type="submit" class="primary" value="Upload Pictures" />
        </div>
        @Html.HiddenFor(x => x.PrivateManagerId)
        @Html.HiddenFor(x => x.MerchantId)
        @Html.HiddenFor(x => x.InternalId)
        @Html.HiddenFor(x => x.StoreItemId)
    }
</div>

<script type="text/javascript">
    $("#Price").numeric({ negative: false });
    $("#Shipping").numeric({ negative: false });
    $("#ShippingAdditional").numeric({ negative: false });
    $("#Weight").numeric({ negative: false });

    $("#createNewItem").validate({
        rules: {
            Name: "required",
            ItemTypeEnum: "required",
            Description: "required",
            Price: {
                required: true,
                minStrict: .49,
            },
            QuantityInStock: {
                number: true
            }
        }
    });

    $('#colorSelector').ColorPicker({
        color: '#0000ff',
        onShow: function (colpkr) {
            $(colpkr).fadeIn(500);
            return false;
        },
        onHide: function (colpkr) {
            $(colpkr).fadeOut(500);
            return false;
        },
        onChange: function (hsb, hex, rgb) {
            $('#colorSelector div').css('backgroundColor', '#' + hex);
            $("#colorSelected").html('#' + hex);
        }
    });

    $(document).ready(function () {
        LoadDropDownBackgroundColors();
    });

    $(function () {
        tinymce.init({
            mode: "textareas",
            elements: "elm2",
            theme: "advanced",
            skin: "o2k7",
            skin_variant: "silver",
            plugins: "safari,style,layer,table,advhr,advimage,advlink,inlinepopups,preview,media,contextmenu,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template",

            // Theme options
            theme_advanced_buttons1: "bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,bullist,numlist,|,outdent,indent,blockquote,|,formatselect,fontsizeselect",
            theme_advanced_buttons2: "link,unlink,anchor,image,cleanup,code,|,preview,|,forecolor,backcolor,|tablecontrols,|,hr,removeformat,visualaid,|,iespell,media,|,ltr,rtl",
            theme_advanced_buttons3: "",
            theme_advanced_buttons4: "",
            theme_advanced_toolbar_location: "top",
            theme_advanced_toolbar_align: "left",
            theme_advanced_statusbar_location: "bottom",
            theme_advanced_resizing: true,
        });
    });
</script>
