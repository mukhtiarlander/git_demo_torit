@model RDN.Portable.Classes.Voting.VotingClass
@{
    ViewBag.Title = "Edit Poll";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int i = 0;
}

<div class="fixedContainer">
    <div class="fixedlinksContainter">
        <div class="backLink">
            <div class="navIcons">
                <a title="Polls" href="@Url.Content("~/poll/" + @Model.LeagueId)">
                    <img src="@Url.Content("~/Content/images/icons/poll.png")"  />Polls
                </a>
            </div>
        </div>
        <div class="rightBackLink">
            <div class="navIcons">
                <a title="Vote" href="@Url.Content("~/poll/votev2/" + Model.LeagueId + "/" + Model.VotingId)">
                    <img src="@Url.Content("~/Content/images/icons/vote.png")"  />Vote
                </a>
            </div>
            <div class="inputIcons">
                @using (Html.BeginForm("DeletePoll", "Vote", FormMethod.Post, new { @id = "createNewEventForm" }))
                {
                    <input title="Delete Poll" type="image" onclick="return confirm('Really Delete Poll?')" src="@Url.Content("~/Content/images/icons/delete.png")" />
                    <span>Delete
                @Html.HiddenFor(x => x.VotingId)
                        @Html.HiddenFor(x => x.LeagueId)
                    </span>
                }
            </div>
            @if (!Model.IsClosed)
            { 
                <div class="inputIcons">
                    @using (Html.BeginForm("ClosePoll", "Vote", FormMethod.Post, new { @id = "createNewEventForm" }))
                    {
                        <input title="Close Poll" type="image" onclick="return confirm('Really Close Poll?')" src="@Url.Content("~/Content/images/icons/close.png")" />
                        <span>Close
                @Html.HiddenFor(x => x.VotingId)
                            @Html.HiddenFor(x => x.LeagueId)
                        </span>
                    }
                </div>
            }
            else
            {             
                <div class="inputIcons">
                    @using (Html.BeginForm("OpenPoll", "Vote", FormMethod.Post, new { @id = "createNewEventForm" }))
                    {
                        <input title="Open Poll" type="image" onclick="return confirm('Really Open Poll?')" src="@Url.Content("~/Content/images/icons/open.png")" />
                        <span>Open
                @Html.HiddenFor(x => x.VotingId)
                            @Html.HiddenFor(x => x.LeagueId)
                        </span>
                    }
                </div>
            }

        </div>
    </div>
    <div class="fixedCenterContainter">
        @using (Html.BeginForm("UpdatePollV2", "Vote", FormMethod.Post, new { @id = "createNewEventForm" }))
        { 
            <table>
                <tr>
                    <td class="fixTitlePoll">Title: </td>
                    <td></td>

                </tr>
                <tr>

                    <td class="superLargeInput">@Html.TextBoxFor(x => x.Title)</td>
                    <td></td>
                </tr>
                <tr>
                    <td colspan="2">
                        <div class="divider"></div>
                    </td>
                </tr>
                <tr>
                    <td ><label><span class="b">Open Results:</span> @Html.CheckBoxFor(x=>x.IsOpenToLeague) <span class="i">Show league members the results</span></label></td>
                    <td></td>
                </tr>
                <tr>
                    <td><span class="b">Description:</span> </td>
                </tr>
                <tr>
                    
                    <td> 

                         @Html.TextArea("Description", new
                                           {
                                               id = "wmd-input",
                                               @Value = Model.Description != null ? Model.Description.ToString() : "",
                                               style = "width:450px"
                                           }) 

                    </td>
                     <td>
                        <input class="primary" style="float: left;" type="submit" value="Update Poll" /></td>
                </tr>
              <tr><td></td></tr>
                <tr><td></td></tr>
            </table>
        
           
            <div>
            </div>
            @Html.HiddenFor(x => x.LeagueId)
            @Html.HiddenFor(x => x.VotingId)
        }
        <div class="clear"></div>
        <br /><div>
            <table class="addForumPostTbl">
                <tr>
                    <td class="b " colspan="3">@if (Model.IsPollAnonymous)
                                               {<span>Anonymous Questions & Answers:</span> }
                                               else
                                               {  <span>Questions & Answers:</span> }
                    </td>
                </tr>
            </table>
            <div id="pollQuestions">
                @foreach (var question in Model.Questions.OrderBy(x => x.SortableOrderId))
                {
                    <table id="questionTable-@question.QuestionId">
                        <tr>
                            <td colspan="2" class="pollViewAdminQuestion" id="updateQuestionTd-@question.QuestionId">@question.Question @if (question.QuestionType == RDN.Portable.Classes.Voting.Enums.QuestionTypeEnum.Multiple) { <span class="i n"> - multiple choice</span> } </td>
                             
                            <td class="extraLargeInput noTwoLine"><span class="spanLink" onclick="EditQuestionInPoll(this, '@question.Question', '@question.QuestionId')">Edit</span>
                                <img class="cursor sortableHandle" src="/Content/images/icons/move-arrow.png" title="Sort Question/Drag and Drop" /></td>
                        </tr>
                        @foreach (var answer in question.Answers.OrderBy(x => x.AnswerId))
                        {               
                            <tr class="@(i % 2 == 0 ? "oddP" : "evenP")">
                                <td>
                                    @question.Votes.Where(x => x.AnswerId == answer.AnswerId).Count() <span class="smallFont">vote(s)</span> @question.GetPercentage(answer.AnswerId)%</td>
                                <td  id="updateAnswerTd-@answer.AnswerId"><b>@answer.Answer</b>
                                </td>
                                <td class="extraLargeInput noTwoLine">
                                    @if (!answer.WasRemoved)
                                    { 
                                        <span class="spanLink" onclick="EditAnswerInPoll(this, '@answer.Answer', '@answer.AnswerId')">Edit</span> <span class="spanLink" onclick="RemoveAnswerInPoll(this, '@answer.AnswerId')">Remove</span>
                                    }
                                    else
                                    { 
                                        <span>Answer Was Removed From Poll</span>
                                    }
                                </td>
                            </tr>
                                    if (!Model.IsPollAnonymous)
                                    {
                                        foreach (var vote in question.Votes.Where(x => x.AnswerId == answer.AnswerId).OrderBy(x => x.DerbyName))
                                        { 
                            <tr class="@(i % 2 == 0 ? "oddP" : "evenP")">
                                <td></td>
                                <td>
                                    <a href="@Url.Content("~/Member/" + vote.MemberId.ToString().Replace("-", "") + "/" + RDN.Utilities.Strings.StringExt.ToSearchEngineFriendly(vote.DerbyName))">@vote.DerbyName</a>
                                    - @vote.OtherText</td>
                                <td></td>
                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        foreach (var vote in question.Votes.Where(x => x.AnswerId == answer.AnswerId).OrderBy(x => x.DerbyName))
                                        { 
                            <tr class="@(i % 2 == 0 ? "oddP" : "evenP")">
                                <td></td>
                                <td>
                                    @vote.OtherText</td>
                                <td></td>
                            </tr>
                                        }
                                    }
                            <tr class="@(i % 2 == 0 ? "oddP" : "evenP")">
                                <td colspan="3">
                                    <div style="width: @question.GetBarLength(answer.AnswerId, 720)px" class="VoteControlPollBar">
                                        &nbsp;
                                    </div>
                                </td>

                            </tr>
                                    { i += 1; }
                        }
                        <tr id="newAnswerForQuestionTd-@question.QuestionId">
                            <td>Add Answer:</td>
                            <td class="extraLargeInput">
                                <input  id="newAnswerForQuestionInput-@question.QuestionId" />
                                <span class="spanLink" onclick="AddNewAnswerToQuestionPoll(this, '@question.QuestionId')">Add Answer</span></td>
                            <td></td>
                        </tr>
                        <tr>
                            <td colspan="3">
                                <div class="divider"></div>
                            </td>
                        </tr>
                    </table>
                }

            </div>
            <table>
                <tr>
                    <td class="b">Didn't Vote:
                    </td>
                    <td></td>
                    <td id="emailPollLink">
                        <input class="primary" type="button" value="ReSend Email Notifications" onclick="SendEmailPollNotification('@Model.LeagueId    ','@Model.VotingId    ')" /></td>
                </tr>
                @foreach (var mem in Model.Voters.OrderBy(x => x.DerbyName))
                { 
                    <tr class="@(i % 2 == 0 ? "oddP" : "evenP")">
                        <td></td>

                        <td>
                            <a href="@Url.Content("~/Member/" + mem.MemberId.ToString().Replace("-", "") + "/" + RDN.Utilities.Strings.StringExt.ToSearchEngineFriendly(mem.DerbyName))">@mem.DerbyName</a>
                        </td>
                        <td></td>
                    </tr>
                }
            </table>
            @Html.HiddenFor(x => x.LeagueId)
            @Html.HiddenFor(x => x.VotingId)
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function(){
        Polls.Initialize('@Model.VotingId');

    });
    $("#PollsAdd").validate({
        rules: {
            AnswerType: "required"
        }
    });
    $("#pollQuestions").sortable({
        handle:'.sortableHandle',
        helper:jquerySortableHelper, 
        update: function(event, ui) {
            var idsInOrder = JSON.stringify($("#pollQuestions").sortable("toArray"));
            
            Polls.SaveResortedPoll(idsInOrder);
        } }).disableSelection();
    $(function () {
        tinymce.init({
            mode: "textareas",
            elements: "elm2",
            theme: "advanced",
            skin: "o2k7",
            skin_variant: "silver",
            plugins: "safari,style,layer,table,advhr,advimage,advlink,inlinepopups,preview,media,contextmenu,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template",

            // Theme options
            theme_advanced_buttons1: "bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,bullist,numlist,|,outdent,indent,blockquote,|,formatselect,fontsizeselect",
            theme_advanced_buttons2: "link,unlink,anchor,image,cleanup,code,|,preview,|,forecolor,backcolor,|tablecontrols,|,hr,removeformat,visualaid,|,iespell,media,|,ltr,rtl",
            theme_advanced_buttons3: "",
            theme_advanced_buttons4: "",
            theme_advanced_toolbar_location: "top",
            theme_advanced_toolbar_align: "left",
            theme_advanced_statusbar_location: "bottom",
            theme_advanced_resizing: true,
        });
    });
</script>
