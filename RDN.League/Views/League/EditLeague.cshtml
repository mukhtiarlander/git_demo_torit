@using RDN.Portable.Classes.Federation.Enums
@using RDN.Utilities.Enums;
@model RDN.League.Models.League.LeagueModel
@{
    ViewBag.Title = "Edit " + Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="fixedContainer">
    <div class="fixedCenterContainter2  ">

        @using (Html.BeginForm("EditLeague", "League", FormMethod.Post, new { enctype = "multipart/form-data" }))
        { 
            <div class="vmPicture">
                @if (Model.Logo != null)
                { 
                    <img alt="@Model.Logo.Alt" src="@Model.Logo.ImageUrl" />
                }
                else
                {
                    <img src="@Url.Content("~/Content/images/Rollerball_pink_s100.png")" alt="RDNation Logo" />
                }
                <br />
                <span class="b">League Logo</span><br />
                <input type="file" name="file" id="file" class="fileUpload" accept="image/*" />
            </div>
            <div class="vmMemberDescription">
                <div class="usual">
                    <ul class="idTabs">
                        <li><a href="#League">League
                        </a></li>
                        <li><a href="#Social">Social
                        </a></li>
                        <li><a href="#Rules">Rules</a></li>
                        <li><a href="#Internal">Internal
                        </a></li>
                    </ul>
                    <div id="League" class="usualInner">
                        <table class="editMemberTable">
                            <tr>
                                <td class="b alRight">League Name:
                                </td>
                                <td>@Html.TextBoxFor(x => x.Name)
                                </td>
                            </tr>
                            <tr>
                                <td class="b alRight">City:
                                </td>
                                <td>@Html.TextBoxFor(x => x.City)
                                </td>
                            </tr>
                            <tr>
                                <td class="b alRight">State:
                                </td>
                                <td>@Html.TextBoxFor(x => x.State)
                                </td>
                            </tr>
                            <tr>
                                <td class="b alRight">Zip Code:
                                </td>
                                <td>@Html.TextBoxFor(x => x.ZipCode)
                                </td>
                            </tr>
                            <tr>
                                <td class="b alRight">Country:
                                </td>
                                <td>@Html.TextBoxFor(x => x.Country)
                                </td>
                            </tr>
                            <tr>
                                <td class="b alRight">Culture:</td>
                                <td>@Html.DropDownListFor(x => x.CultureSelected, Model.CultureList, "Choose Culture...")  <span class="i">Used for dates & languages. Want Another? Contact @RDN.Portable.Config.ServerConfig.DEFAULT_EMAIL</span></td>
                            </tr>
                            <tr>
                                <td class="b alRight">Date Of Founding:
                                </td>
                                <td>
                                    @Html.TextBoxFor(model => model.FoundedCultureString, new { @class = "jquery_datepicker", @Value = Model.Founded.ToShortDateString() })
                                    @Html.HiddenFor(x => x.Founded)
                                </td>
                            </tr>
                            <tr>
                                <td class="b alRight">Phone Number:
                                </td>
                                <td>@Html.TextBoxFor(x => x.PhoneNumber)
                                </td>
                            </tr>
                            <tr>
                                <td class="b alRight">Email Address:
                                </td>
                                <td>@Html.TextBoxFor(x => x.Email)
                                </td>
                            </tr>

                        </table>

                    </div>
                    <div id="Social" class="usualInner">
                        <table class="editMemberTable">

                            <tr>
                                <td class="b alRight">Website Url:
                                </td>
                                <td>@Html.TextBoxFor(x => x.Website)
                                </td>
                            </tr>
                            <tr>
                                <td class="b alRight">Twitter Url:
                                </td>
                                <td>@Html.TextBoxFor(x => x.Twitter)
                                </td>
                            </tr>
                            <tr>
                                <td class="b alRight">Facebook Url:
                                </td>
                                <td>@Html.TextBoxFor(x => x.Facebook)
                                </td>
                            </tr>
                            <tr>
                                <td class="b alRight">Instagram Url:
                                </td>
                                <td>@Html.TextBoxFor(x => x.Instagram)
                                </td>
                            </tr>

                        </table>

                    </div>

                    <div id="Rules" class="usualInner">
                        <table class="editMemberTable">
                            <tr>
                                <td class="b alRight alignTop">Rule Sets Play:
                                </td>
                                <td class="checkBoxRuleSet">
                                    <div>@Html.CheckBox(RuleSetsUsedEnum.MADE.ToString(), Model.RuleSetsPlayedEnum.HasFlag(RuleSetsUsedEnum.MADE))
                                        <label for="@RuleSetsUsedEnum.MADE">@EnumExt.ToFreindlyName(RuleSetsUsedEnum.MADE)</label>
                                    </div>
                                    <div>@Html.CheckBox(RuleSetsUsedEnum.OSDA.ToString(), Model.RuleSetsPlayedEnum.HasFlag(RuleSetsUsedEnum.OSDA))
                                        <label for="@RuleSetsUsedEnum.OSDA">@EnumExt.ToFreindlyName(RuleSetsUsedEnum.OSDA)</label>
                                    </div>
                                    <div>@Html.CheckBox(RuleSetsUsedEnum.RDCL.ToString(), Model.RuleSetsPlayedEnum.HasFlag(RuleSetsUsedEnum.RDCL))
                                        <label for="@RuleSetsUsedEnum.RDCL">@EnumExt.ToFreindlyName(RuleSetsUsedEnum.RDCL)</label>
                                    </div>
                                    <div>@Html.CheckBox(RuleSetsUsedEnum.Renegade.ToString(), Model.RuleSetsPlayedEnum.HasFlag(RuleSetsUsedEnum.Renegade))
                                        <label for="@RuleSetsUsedEnum.Renegade">@EnumExt.ToFreindlyName(RuleSetsUsedEnum.Renegade)</label>
                                    </div>
                                    <div>@Html.CheckBox(RuleSetsUsedEnum.Texas_Derby.ToString(), Model.RuleSetsPlayedEnum.HasFlag(RuleSetsUsedEnum.Texas_Derby))
                                        <label for="@RuleSetsUsedEnum.Texas_Derby">@EnumExt.ToFreindlyName(RuleSetsUsedEnum.Texas_Derby)</label>
                                    </div>
                                    <div>@Html.CheckBox(RuleSetsUsedEnum.The_WFTDA.ToString(), Model.RuleSetsPlayedEnum.HasFlag(RuleSetsUsedEnum.The_WFTDA))
                                        <label for="@RuleSetsUsedEnum.The_WFTDA">@EnumExt.ToFreindlyName(RuleSetsUsedEnum.The_WFTDA)</label>
                                    </div>
                                    <div>@Html.CheckBox(RuleSetsUsedEnum.USARS.ToString(), Model.RuleSetsPlayedEnum.HasFlag(RuleSetsUsedEnum.USARS))
                                        <label for="@RuleSetsUsedEnum.USARS">@EnumExt.ToFreindlyName(RuleSetsUsedEnum.USARS)</label>
                                    </div>
                                </td>
                            </tr>
                        </table>

                    </div>

                    <div id="Internal" class="usualInner">
                        <table class="editMemberTable">
                            <tr>
                                <td class="alignTop  alRight"><span class="b">Colors Of League:</span><br />
                                    <span class="i">Colors used through out RDNation.</span>
                                </td>
                                <td>


                                    <div id="colorsToAdd">
                                        @foreach (var color in Model.Colors)
                                        { 
                                            <div class='selectedColorCon'>
                                                <div class='selectedColor' style='background-color:@color.HexColor;'>@color.NameOfColor</div>
                                                <span class='spanLink' onclick="RemoveSelectedColor(this, '@color.HexColor')">Remove</span>
                                            </div>
                                        }
                                    </div>
                                </td>
                            </tr>
                            <tr id="colors">
                                <td class="alignTop  alRight"><span class="b">Add Colors to League:</span><br />

                                </td>
                                <td>
                                    <br />
                                    @Html.DropDownListFor(x => x.ColorTempSelected, Model.ColorList, "Choose Colors...", new { @onchange = "ColorSelectorChanged()" })  <span class="spanLink" onclick="AddSelectedColor()">Add Selected</span>
                                    <div><b>OR</b></div>
                                    <div>
                                        <input id="colorName" placeholder="Name Of New Color" />
                                        <div id="colorSelector" class="colorPickerC">
                                            <div class="colorPickerIn" style="background-color: #0000ff;"></div>
                                        </div>
                                        <span class="spanLink" onclick="CreateNewColor()">Create New Color</span>
                                        <div id="colorSelected" class="displayNone"></div>
                                    </div>


                                    @Html.HiddenFor(x => x.ColorsSelected)
                                </td>
                            </tr>
                            <tr>
                                <td colspan="2">
                                    <div class="divider"></div>
                                </td>
                            </tr>
                            <tr>
                                <td colspan="2">
                                    <span class="b">Your Internal Message To Members:</span> - Will be shown on their
                                welcome screen.<br />

                                    @Html.TextAreaFor(x => x.InternalWelcomeMessageModel, new { id = "wmd-input" })

                                </td>
                            </tr>
                        </table>

                    </div>

                </div>


            </div>
            
            <div class="clear">
            </div>
            
            <div class="updateMemberButton">
                @if (ViewBag.Saved)
                { 
                    <span class="addedSuccessfully">Updated Successfully!</span>
                }
                <input type="submit" class="primary" value="Update League" />
            </div>
            @Html.HiddenFor(x => x.LeagueId)
        }
    </div>
</div>

<script type="text/javascript">
    $('#colorSelector').ColorPicker({
        color: '#0000ff',
        onShow: function (colpkr) {
            $(colpkr).fadeIn(500);
            return false;
        },
        onHide: function (colpkr) {
            $(colpkr).fadeOut(500);
            return false;
        },
        onChange: function (hsb, hex, rgb) {
            $('#colorSelector div').css('backgroundColor', '#' + hex);
            $("#colorSelected").html('#' + hex);
        }
    });
    $(document).ready(function () {
        LoadDropDownBackgroundColors();
    });


    $('#FoundedCultureString').datepicker($.extend({},
  $.datepicker.regional["@(System.Threading.Thread.CurrentThread.CurrentCulture.Name)"] || $.datepicker.regional[''],
  {
      altField: "#Founded",
      altFormat: "mm/dd/yy"
  }));

    $(function () {
        tinymce.init({
            mode: "textareas",
            elements: "elm2",
            theme: "advanced",
            skin: "o2k7",
            skin_variant: "silver",
            plugins: "safari,style,layer,table,advhr,advimage,advlink,inlinepopups,preview,media,contextmenu,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template",

            // Theme options
            theme_advanced_buttons1: "bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,bullist,numlist,|,outdent,indent,blockquote,|,formatselect,fontsizeselect",
            theme_advanced_buttons2: "link,unlink,anchor,image,cleanup,code,|,preview,|,forecolor,backcolor,|tablecontrols,|,hr,removeformat,visualaid,|,iespell,media,|,ltr,rtl",
            theme_advanced_buttons3: "",
            theme_advanced_buttons4: "",
            theme_advanced_toolbar_location: "top",
            theme_advanced_toolbar_align: "left",
            theme_advanced_statusbar_location: "bottom",
            theme_advanced_resizing: true,
        });
    });
</script>
