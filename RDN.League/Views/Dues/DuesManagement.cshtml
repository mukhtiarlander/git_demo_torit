@using RDN.Library.Classes.Dues;
@using RDN.Library.Cache;
@model RDN.Portable.Classes.Controls.Dues.DuesPortableModel
@{
    ViewBag.Title = "Dues for " + Model.LeagueOwnerName;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var memId = RDN.Library.Classes.Account.User.GetMemberId();
}
<ol class="breadcrumb">
    <li><a href="@RDN.Utilities.Config.ConfigManager.InternalSite">Home</a></li>
    <li class="active">Dues</li>
</ol>

<div class="panel panel-default margin-top-20">
    <div class="panel-heading">
        @if (Model.DuesId == new Guid())
        {
            <div class="row">
                <div class="col-xs-12 col-sm-6">
                    <h3 style="margin-top:5px !important"><i class="fa fa-cog"></i> Dues Setup</h3>
                </div>
                <div class="col-xs-12 col-sm-6 text-right">
                    @using (Html.BeginForm("CreateDuesManagement", "Dues"))
                    {
                        <button type="submit" class="btn btn-success btn-sm">Start Tracking Dues</button>
                        @Html.HiddenFor(x => x.OwnerEntity);
                        @Html.HiddenFor(x => x.DuesId);
                        @Html.HiddenFor(x => x.LeagueOwnerId);
                    }
                </div>
            </div>
            <span class="text-muted">
                It looks like dues management has not yet been setup for your league. Go ahead and
                create one so you can start reminding your league about dues and tracking each collection!
                This dues management screen will be open to all your members!
            </span>
        }
        else
        {
            <div class="row">
                <div class="col-xs-12 col-sm-6">
                    <h3 style="margin-top:5px !important"><i class="fa fa-money"></i> Dues Collections For @Model.LeagueOwnerName</h3>
                </div>
                <div class="col-xs-12 col-sm-6 text-right">
                        @if (MemberCache.IsTreasurerOrBetterOfLeague(memId))
                        {
                            <a class="btn btn-primary btn-sm" title="Generate New Dues Item" onclick="return confirm('Generate New Dues Payment?')" href="@Url.Content("~/dues/new/" + @Model.OwnerEntity + "/" + @Model.LeagueOwnerId.ToString().Replace("-", "") + "/" + @Model.DuesId.ToString().Replace("-", ""))">
                                <i class="fa fa-plus-circle"></i> New
                            </a>
                        }
                        <a class="btn btn-info btn-sm" title="Your Dues Payments" href="@Url.Content("~/dues/member/" + @Model.LeagueOwnerId.ToString().Replace("-", "") + "/" + memId.ToString().Replace("-", ""))">
                            <i class="fa fa-user"></i> Yours
                        </a>
                        @if (MemberCache.IsTreasurerOrBetterOfLeague(memId))
                        {
                            <div class="dropdown hidden-sm visible-xs">
                              <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
                                Dropdown
                                <span class="caret"></span>
                              </button>
                              <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
                                <li role="presentation">
                                    <a title="Dues Settings" href="@Url.Content("~/dues/settings/" + @Model.OwnerEntity + "/" + @Model.LeagueOwnerId.ToString().Replace("-", "") + "/" + @Model.DuesId.ToString().Replace("-", ""))">
                                        <i class="fa fa-cog"></i> Settings
                                    </a>
                                </li>
                                <li role="presentation">
                                    <a title="Dues Classifications" href="@Url.Content("~/dues/classification/" + @Model.OwnerEntity + "/" + @Model.LeagueOwnerId.ToString().Replace("-", "") + "/" + @Model.DuesId.ToString().Replace("-", ""))">
                                        <i class="fa fa-folder"></i> Classify
                                    </a>
                                </li>
                                <li role="presentation">
                                    <button type="button" onclick="document.getElementById('DuesReport').submit();" title="Export Report">
                                        <i class="fa fa-download"></i> Export
                                    </button>
                                </li>
                                <li role="presentation">
                                    <a title="Withstanding By Member" href="@Url.Content("~/dues/members/" + @Model.OwnerEntity + "/" + @Model.LeagueOwnerId.ToString().Replace("-", ""))">
                                        <i class="fa fa-group"></i> Members
                                    </a>
                                </li>
                              </ul>
                            </div>
                        }
                    </div>
            </div>

        }

    </div>
    @if (MemberCache.IsTreasurerOrBetterOfLeague(memId))
{
    <div class="hidden-xs">
        <div class="panel-heading text-right padding-top-5" style="background-color:#fafafa">
            <a class="btn btn-default btn-sm margin-top-5" title="Dues Settings" href="@Url.Content("~/dues/settings/" + @Model.OwnerEntity + "/" + @Model.LeagueOwnerId.ToString().Replace("-", "") + "/" + @Model.DuesId.ToString().Replace("-", ""))">
                <i class="fa fa-cog"></i> Settings
            </a>
            <a class="btn btn-default btn-sm margin-top-5" title="Dues Classifications" href="@Url.Content("~/dues/classification/" + @Model.OwnerEntity + "/" + @Model.LeagueOwnerId.ToString().Replace("-", "") + "/" + @Model.DuesId.ToString().Replace("-", ""))">
                <i class="fa fa-folder"></i> Classify
            </a>
            <button type="button" class="btn btn-default btn-sm margin-top-5" onclick="document.getElementById('DuesReport').submit();" title="Export Report">
                <i class="fa fa-download"></i> Export
            </button>
            <a class="btn btn-default btn-sm margin-top-5" title="Withstanding By Member" href="@Url.Content("~/dues/members/" + @Model.OwnerEntity + "/" + @Model.LeagueOwnerId.ToString().Replace("-", ""))">
                <i class="fa fa-group"></i> Members
            </a>
        </div>
    </div>
}
    <div id="double-scroll1" class="panel-body no-padding" style="overflow-x:auto">
        <table class="table table-striped table-hover table-condensed no-margin-bottom" id="notPaid">
            <thead>
                <tr>
                    <th>
                        Due Date
                    </th>
                    <th class="text-right">
                        Cost
                    </th>
                    <th class="text-center">
                        Members Paid
                    </th>
                    <th class="text-center">
                        Members Waived
                    </th>
                    <th class="text-right">
                        Total Withstanding (@Model.DuesFees.Sum(x => x.TotalWithstanding).ToString("N2"))
                    </th>
                    <th class="text-right">
                        Total Paid +@Model.DuesFees.Sum(x => x.TotalPaid).ToString("N2")
                    </th>
                    <th class="text-center">Pay</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.DuesFees)
                {
                <tr>

                    <td>
                        @if (MemberCache.IsTreasurerOrBetterOfLeague(memId))
                            {
                            <a href="@Url.Content("~/dues/collection/" + item.DuesItemId + "/" + Model.DuesId.ToString().Replace("-", ""))">@item.PayBy.ToLongDateString()</a>
                            }
                            else
                            {
                            <span>@item.PayBy.ToLongDateString()</span>
                            }
                    </td>
                    <td class="text-right">
                        @item.CostOfDues.ToString("N2")
                    </td>
                    <td class="text-center">
                        @item.DuesCollected.Where(x => x.IsWaived == false).GroupBy(x => x.MemberPaidId).Count()
                    </td>
                    <td class="text-center">
                        @item.DuesCollected.Where(x => x.IsWaived == true).GroupBy(x => x.MemberPaidId).Count()
                    </td>
                    <td class="text-right">
                        @item.TotalWithstanding.ToString("N2")
                    </td>
                    <td class="text-right">
                        @item.TotalPaid.ToString("N2")
                    </td>
                    <td class="text-center">
                        @if (Model.AcceptPaymentsOnline && !item.IsCurrentMemberPaidOrWaivedInFull)
                        {
                            using (Html.BeginForm("PayDuesOnlinePayPal", "Dues", FormMethod.Post))
                            {
                                <button class="btn btn-warning btn-xs" type="submit">Pay with Paypal</button>
                                @Html.Hidden("DuesItemId", item.DuesItemId)
                                @Html.HiddenFor(x => x.DuesId)
                                @Html.HiddenFor(x => x.LeagueOwnerId)
                            }

                        }
                        else if (item.IsCurrentMemberPaidOrWaivedInFull)
                        {
                           <i class="fa fa-check-circle fa-lg text-info"></i>
                          }
                    </td>

                    <td>
                        @if (MemberCache.IsTreasurerOrBetterOfLeague(memId))
                        {
                        <a class="btn btn-xs btn-success" href="@Url.Content("~/dues/collection/edit/" + item.DuesItemId + "/" + Model.DuesId.ToString().Replace("-", ""))"><i class="fa fa-pencil"></i></a>
                        }
                    </td>
                </tr>
                }
            </tbody>
            <tfoot class="vmTableHead">
                <tr>
                    <th>
                        Due Date
                    </th>
                    <th class="text-right">
                        Cost
                    </th>
                    <th class="text-center">
                        Members Paid
                    </th>
                    <th class="text-center">
                        Members Waived
                    </th>
                    <th class="text-right">
                        @Model.DuesFees.Sum(x => x.TotalWithstanding).ToString("N2")
                    </th>
                    <th class="text-right">
                        +@Model.DuesFees.Sum(x => x.TotalPaid).ToString("N2")
                    </th>
                    <th class="text-center">Pay</th>
                    <th></th>
                </tr>
            </tfoot>
        </table>

        @using (Html.BeginForm("DuesManagementReport", "Dues", FormMethod.Post, new { @id = "DuesReport" }))
        {
            @Html.HiddenFor(x => x.DuesId)
            @Html.HiddenFor(x => x.LeagueOwnerId)

        }
    </div>
    <div class="panel-footer">
        @if (!Model.AcceptPaymentsOnline)
        {
            <div class="alert alert-warning">
                <b>Collect Dues Online:</b> Your league can collect dues through RDNation just by enabling the feature within the dues management settings page.
            </div>
        }
        New dues collection dates automatically get generated prior to the date of the month
        defined in the settings. So there is no need to generate a new dues payment unless
        you have a payment not on the same schedule as defined in the settings.
    </div>
</div>



    <script type="text/javascript">
        $(document).ready(function () {
            $('#notPaid').dataTable({
                "bPaginate": false,     
                "bLengthChange": false,
                "bFilter": false,
                "bInfo": false,
                "bAutoWidth": false,
                "aoColumns": [{ "sType": "natural" }, { "sType": "natural" }, { "sType": "natural" }, { "sType": "natural" }, { "sType": "natural" }, { "sType": "natural" }, null, null],
                "aoColumnDefs": [{
                    'bSortable': false,
                    'aTargets': [6,7]
                }]
            });
            $("#double-scroll1").doubleScroll();
        });
    </script>


