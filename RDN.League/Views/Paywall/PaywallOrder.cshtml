@model RDN.Library.Classes.Payment.Classes.Display.DisplayInvoice
@using RDN.Library.Classes.Payment.Enums;
@using RDN.Utilities.Enums;
@using RDN.Portable.Classes.Payment.Enums;
@{
    ViewBag.Title = "Your Order";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="fixedContainer">
    <div class="fixedlinksContainter">
        <div class="backLink">
            < <a href="@Url.Content("~/paywall/payments/" + Model.Merchant.PrivateManagerId.ToString().Replace("-", "") + "/" + Model.Merchant.MerchantId.ToString().Replace("-", ""))">Payments</a>
        </div>
    </div>
    <div class="fixedCenterContainter">
        <div class="fixTitle">
            View Paywall Order
        </div>
    
            <div class="divider"></div>
        <div>
            @using (Html.BeginForm("PaywallOrder", "Paywall", FormMethod.Post, new { @id = "order" }))
            { 
                <table class="addForumPostTbl">
                    <tr>
                        <td class="b vLT2D">Created:
                        </td>
                        <td class="largeInput">
                            @Model.Created.ToString("yyyy/M/d")
                        </td>
                    </tr>
                    <tr>
                        <td class="b vLT2D">Invoice Id:
                        </td>
                        <td class="largeInput">
                            @Model.InvoiceId.ToString().Replace("-", "")
                        </td>
                    </tr>
                    <tr>
                        <td class="b vLT2D">Invoice Status:
                        </td>
                        <td id="invoiceStatus">
                            @EnumExt.ToFreindlyName(Model.InvoiceStatus)

                        </td>
                    </tr>
                    <tr>
                        <td class="b vLT2D">Valid Till:
                        </td>
                        <td class="largeInput">
                            @Html.TextBoxFor(x => x.Paywall.ValidUntilDisplay)
                        </td>
                    </tr>
                    <tr>
                        <td class="b vLT2D">Price Type:
                        </td>
                        <td class="largeInput">
                            @RDN.Utilities.Enums.EnumExt.ToFreindlyName(Model.Paywall.PriceType)
                        </td>
                    </tr>

                    <tr>
                        <td class="b vLT2D">Payment Through:
                        </td>
                        <td class="largeInput">
                            @if (Model.PaymentProvider == RDN.Library.Classes.Payment.Enums.PaymentProvider.Paypal)
                            { 
                                <span><a href="http://paypal.com/" target="_blank">Paypal</a></span>
                            }
                            else if (Model.PaymentProvider == RDN.Library.Classes.Payment.Enums.PaymentProvider.Stripe)
                            {
                                <span><a href="http://stripe.com/" target="_blank">Stripe</a></span>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td class="b vLT2D">Total Payment:
                        </td>
                        <td class="smallInput">
                            @Model.TotalIncludingTax @Model.Currency
                        </td>
                    </tr>
                    @if (Model.InvoiceStatus == InvoiceStatus.Partially_Refunded || Model.InvoiceStatus == InvoiceStatus.Refunded)
                    { 
                        <tr>
                            <td class="b vLT2D">Total Refunded:
                            </td>
                            <td class="smallInput">
                                @(Model.TotalIncludingTax - Model.RefundAmount) @Model.Currency
                            </td>
                        </tr>
                    
                    }

                    <tr>
                        <td class="b vLT2D">Times Used Password:
                        </td>
                        <td>
                            @Model.Paywall.TimesUsedPassword
                        </td>
                    </tr>
                    <tr>
                        <td class="b vLT2D">Minutes Actively Used Paywall:
                        </td>
                        <td>
                            @if (Model.Paywall.SecondsViewedPaywall > 0)
                            { 
                                @((Model.Paywall.SecondsViewedPaywall / 60))
                            }
                            else
                            {
                                @Model.Paywall.SecondsViewedPaywall
                            }
                        </td>
                    </tr>
                    <tr>
                        <td class="b vLT2D">Last Used Paywall:
                        </td>
                        <td>
                            @Model.Paywall.LastViewedPaywall.GetValueOrDefault()
                        </td>
                    </tr>
                    <tr>
                        <td class="b vLT2D">Buyers Email:
                        </td>
                        <td>
                            @Model.InvoiceBilling.Email
                        </td>
                    </tr>


                    <tr>
                        <td class="b vLTD">Your Notes:
                        </td>
                        <td>
                            @Html.TextAreaFor(x => x.AdminNote)
                        </td>
                    </tr>
                    <tr>
                        <td></td>
                        <td>

                            <input type="submit" class="primary" value="Update Order" />
                        </td>
                    </tr>
                </table>
                @Html.HiddenFor(x => x.Merchant.PrivateManagerId)
                @Html.HiddenFor(x => x.Merchant.MerchantId)
                @Html.HiddenFor(x => x.InvoiceId)
            }
        </div>
        <br />
        @if (Model.CanRefundCustomer && Model.InvoiceStatus != InvoiceStatus.Refunded)
        { 
            <div>
                <div class="fixTitle">
                    Refund Paywall Order
                </div>
              
                 <div class="titleDescription">

            </div>
            <div class="divider"></div>
                @using (Html.BeginForm("PaywallRefundOrder", "Paywall", FormMethod.Post, new { @id = "orderRefund" }))
                { 
                    <table class="addForumPostTbl">
                        <tr>
                            <td class="b vLT2D">Refund Amount:
                            </td>
                            <td class="largeInput">
                                @Html.TextBoxFor(x => x.RefundAmount)
                            </td>
                        </tr>
                        <tr>
                            <td class="b vLTD">Your Notes:
                            </td>
                            <td>
                                @Html.TextAreaFor(x => x.AdminNote)
                            </td>
                        </tr>
                        <tr>
                            <td></td>
                            <td>

                                <input type="submit" class="primary" value="Refund Order" />
                            </td>
                        </tr>
                    </table>
                    @Html.HiddenFor(x => x.Merchant.PrivateManagerId)
                    @Html.HiddenFor(x => x.Merchant.MerchantId)
                    @Html.HiddenFor(x => x.InvoiceId)
                    @Html.HiddenFor(x => x.PaymentProvider)
                }

            </div>
        }
        <br />
        <br />
        <ul class="noList">
            <li><b>@EnumExt.ToFreindlyName(InvoiceStatus.Not_Started)</b> - didn't complete the order, order is sitting in users Cart.</li>
            <li><b>@EnumExt.ToFreindlyName(InvoiceStatus.Awaiting_Payment)</b> - order was sent to paypal or stripe, awaiting purchase.</li>
            <li><b>@EnumExt.ToFreindlyName(InvoiceStatus.Payment_Successful)</b> - Payment was successful, moving into shipment mode soon.</li>
            <li><b>@EnumExt.ToFreindlyName(InvoiceStatus.Awaiting_Shipping)</b> - Seller NEEDS to ship product.</li>
            <li><b>@EnumExt.ToFreindlyName(InvoiceStatus.Not_Started)</b> - didn't complete the order</li>
            <li><b>@EnumExt.ToFreindlyName(InvoiceStatus.Archived_Item_Completed)</b> - Order is complete and archived</li>
            <li><b>@EnumExt.ToFreindlyName(InvoiceStatus.Cancelled)</b> - Order is cancelled</li>
            <li><b>@EnumExt.ToFreindlyName(InvoiceStatus.Shipped)</b> - Order is shipped.</li>
        </ul>
    </div>
</div>
<script type="text/javascript">
    $('#Paywall_ValidUntilDisplay').datetimepicker({
        ampm: true
    });
    $("#orderRefund").validate({
        rules: {
            RefundAmount: "required"

        }
    });
    $("#RefundAmount").numeric({ negative: false });
</script>
